{"version":3,"sources":["utils/formatBalance.ts","utils/callHelpers.ts","hooks/useHarvest.ts","components/UnlockButton.tsx","utils/erc20.ts","hooks/useFarmsWithBalance.ts","views/Home/components/CardValue.tsx","views/Home/components/CakeHarvestBalance.tsx","views/Home/components/CakeWalletBalance.tsx","hooks/useTokenBalance.ts","hooks/useAllEarnings.ts","views/Home/components/FarmStakingCard.tsx","views/Home/components/CakeStats.tsx","views/Home/components/TotalValueLockedCard.tsx","views/Home/components/TwitterCard.tsx","views/Home/Home.tsx"],"names":["getBalanceNumber","balance","decimals","displayBalance","BigNumber","dividedBy","pow","toNumber","getFullDisplayBalance","toFixed","approve","lpContract","masterChefContract","account","a","methods","options","address","ethers","constants","MaxUint256","send","from","stake","pid","amount","referrer","document","cookie","indexOf","START","END","substring","deposit","times","toString","on","tx","transactionHash","unstake","withdraw","sousUnstake","sousChefContract","emergencyWithdraw","sousEmegencyUnstake","harvest","useHarvest","farmPid","dispatch","useDispatch","useWallet","useMasterchef","onReward","useCallback","txHash","fetchFarmUserDataAsync","useAllHarvest","farmPids","harvestPromises","reduce","accum","Promise","all","useSousHarvest","sousId","useSousChef","handleHarvest","updateUserPendingReward","updateUserBalance","UnlockButton","props","TranslateString","useI18n","connect","reset","onPresentConnectModal","useWalletModal","onClick","getContract","provider","Web3","eth","Contract","erc20","getTokenBalance","tokenAddress","userAddress","contract","balanceOf","call","useFarmsWithBalance","useState","farmsWithBalances","setFarmsWithBalances","fastRefresh","useRefresh","useEffect","calls","farmsConfig","map","farm","getMasterChefAddress","name","params","multicall","masterChefABI","rawResults","results","index","fetchBalances","CardValue","value","fontSize","prefix","suffix","useCountUp","start","end","duration","separator","undefined","countUp","update","updateValue","useRef","current","bold","CakeHarvestBalance","earningsSum","color","style","lineHeight","CakeWalletBalance","cakeBalance","useTokenBalance","setBalance","ethereum","res","fetchBalance","useAllEarnings","balances","fetchAllBalances","StyledFarmStakingCard","styled","Card","Block","div","CardImage","img","Label","theme","colors","textSubtle","Actions","FarmedStakingCard","pendingTx","setPendingTx","farmsWithBalance","getCakeAddress","beastPrice","usePriceCakeBusd","earning","balancesWithValue","filter","balanceType","farmWithBalance","harvestAllFarms","size","mb","src","alt","width","height","id","disabled","length","fullWidth","StyledCakeStats","Row","CakeStats","totalSupply","slowRefresh","setTotalSupply","cakeContract","cakeABI","supply","fetchTotalSupply","useTotalSupply","burnedBalance","bal","useBurnedBalance","farms","useFarms","circSupply","minus","cakeSupply","marketCap","maxTransferAmount","setMaxTransferAmount","transferTax","setTransferTax","beastPerBlock","beastTokenABI","response","mta","mta2","transferTaxRate","response2","ttr","GetMaxTransferAmount","StyledTotalValueLockedCard","SubHeading","TotalValueLockedCard","totalValue","useTotalValue","StyledTwitterCard","TwitterCard","dataSource","sourceType","screenName","chrome","Hero","Cards","BaseLayout","mediaQueries","sm","lg","Home","Page","FarmStakingCard"],"mappings":"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","file":"static/js/10.d7789ff7.chunk.js","sourcesContent":["import BigNumber from 'bignumber.js'\n\nexport const getBalanceNumber = (balance: BigNumber, decimals = 18) => {\n  const displayBalance = new BigNumber(balance).dividedBy(new BigNumber(10).pow(decimals))\n  return displayBalance.toNumber()\n}\n\nexport const getFullDisplayBalance = (balance: BigNumber, decimals = 18) => {\n  return balance.dividedBy(new BigNumber(10).pow(decimals)).toFixed()\n}\n","import BigNumber from 'bignumber.js'\nimport { ethers } from 'ethers'\n\nexport const approve = async (lpContract, masterChefContract, account) => {\n  return lpContract.methods\n    .approve(masterChefContract.options.address, ethers.constants.MaxUint256)\n    .send({ from: account })\n}\n\nexport const stake = async (masterChefContract, pid, amount, account) => {\n  let referrer = \"0x0000000000000000000000000000000000000000\";\n\n  if (document.cookie.indexOf(\"refer=\") !== -1) {\n    const START = document.cookie.indexOf(\"refer=\") + 6;\n    const END = document.cookie.substring(START).indexOf(\";\");\n\n    if (END === -1) {\n      referrer = document.cookie.substring(START);\n    } else {\n      referrer = document.cookie.substring(START).substring(0, END);\n    }\n  }\n\n  return masterChefContract.methods.deposit(\n    pid,                                                               // uint256 _pid\n    new BigNumber(amount).times(new BigNumber(10).pow(18)).toString(), // uint256 _amount\n    referrer                                                           // address _referrer\n  )\n  .send({ from: account })\n  .on(\"transactionHash\", (tx) => {\n    return tx.transactionHash\n  });\n}\n\nexport const sousStake = async (sousChefContract, amount, account) => {\n  return sousChefContract.methods\n    .deposit(new BigNumber(amount).times(new BigNumber(10).pow(18)).toString())\n    .send({ from: account })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const sousStakeBnb = async (sousChefContract, amount, account) => {\n  return sousChefContract.methods\n    .deposit()\n    .send({ from: account, value: new BigNumber(amount).times(new BigNumber(10).pow(18)).toString() })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const unstake = async (masterChefContract, pid, amount, account) => {\n  return masterChefContract.methods\n    .withdraw(pid, new BigNumber(amount).times(new BigNumber(10).pow(18)).toString())\n    .send({ from: account })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const sousUnstake = async (sousChefContract, amount, account) => {\n  // shit code: hard fix for old CTK and BLK\n  if (sousChefContract.options.address === '0x3B9B74f48E89Ebd8b45a53444327013a2308A9BC') {\n    return sousChefContract.methods\n      .emergencyWithdraw()\n      .send({ from: account })\n      .on('transactionHash', (tx) => {\n        return tx.transactionHash\n      })\n  }\n  if (sousChefContract.options.address === '0xBb2B66a2c7C2fFFB06EA60BeaD69741b3f5BF831') {\n    return sousChefContract.methods\n      .emergencyWithdraw()\n      .send({ from: account })\n      .on('transactionHash', (tx) => {\n        return tx.transactionHash\n      })\n  }\n  return sousChefContract.methods\n    .withdraw(new BigNumber(amount).times(new BigNumber(10).pow(18)).toString())\n    .send({ from: account })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const sousEmegencyUnstake = async (sousChefContract, amount, account) => {\n  return sousChefContract.methods\n    .emergencyWithdraw()\n    .send({ from: account })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const harvest = async (masterChefContract, pid, account) => {\n  let referrer = \"0x0000000000000000000000000000000000000000\";\n\n  if (document.cookie.indexOf(\"refer=\") !== -1) {\n    const START = document.cookie.indexOf(\"refer=\") + 6;\n    const END = document.cookie.substring(START).indexOf(\";\");\n\n    if (END === -1) {\n      referrer = document.cookie.substring(START);\n    } else {\n      referrer = document.cookie.substring(START).substring(0, END);\n    }\n  }\n\n  return masterChefContract.methods\n    .deposit(\n      pid,     // uint256 _pid\n      \"0\",     // uint256 _amount\n      referrer // address _referrer\n    )\n    .send({ from: account })\n    .on(\"transactionHash\", (tx) => {\n      return tx.transactionHash\n    });\n}\n\nexport const soushHarvest = async (sousChefContract, account) => {\n  return sousChefContract.methods\n    .deposit('0')\n    .send({ from: account })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const soushHarvestBnb = async (sousChefContract, account) => {\n  return sousChefContract.methods\n    .deposit()\n    .send({ from: account, value: new BigNumber(0) })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n","/* eslint-disable @typescript-eslint/no-unused-vars */\nimport { useCallback } from 'react'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { useDispatch } from 'react-redux'\nimport { fetchFarmUserDataAsync, updateUserBalance, updateUserPendingReward } from 'state/actions'\nimport { soushHarvest, soushHarvestBnb, harvest } from 'utils/callHelpers'\nimport { useMasterchef, useSousChef } from './useContract'\n\nexport const useHarvest = (farmPid: number) => {\n  const dispatch = useDispatch()\n  const { account } = useWallet()\n  const masterChefContract = useMasterchef()\n\n  const handleHarvest = useCallback(async () => {\n    const txHash = await harvest(masterChefContract, farmPid, account)\n    dispatch(fetchFarmUserDataAsync(account))\n    return txHash\n  }, [account, dispatch, farmPid, masterChefContract])\n\n  return { onReward: handleHarvest }\n}\n\nexport const useAllHarvest = (farmPids: number[]) => {\n  const { account } = useWallet()\n  const masterChefContract = useMasterchef()\n\n  const handleHarvest = useCallback(async () => {\n    const harvestPromises = farmPids.reduce((accum, pid) => {\n      return [...accum, harvest(masterChefContract, pid, account)]\n    }, [])\n\n    return Promise.all(harvestPromises)\n  }, [account, farmPids, masterChefContract])\n\n  return { onReward: handleHarvest }\n}\n\nexport const useSousHarvest = (sousId, isUsingBnb = false) => {\n  const dispatch = useDispatch()\n  const { account } = useWallet()\n  const sousChefContract = useSousChef(sousId)\n  const masterChefContract = useMasterchef()\n\n  const handleHarvest = useCallback(async () => {\n    await harvest(masterChefContract, sousId, account);\n\n    // if (sousId === 0) {\n    //   await harvest(masterChefContract, 0, account)\n    // } else if (isUsingBnb) {\n    //   await soushHarvestBnb(sousChefContract, account)\n    // } else {\n    //   await soushHarvest(sousChefContract, account)\n    // }\n\n    dispatch(updateUserPendingReward(sousId, account))\n    dispatch(updateUserBalance(sousId, account))\n  }, [account, dispatch, masterChefContract, sousId])\n  // }, [account, dispatch, isUsingBnb, masterChefContract, sousChefContract, sousId])\n\n  return { onReward: handleHarvest }\n}\n","import React from 'react'\nimport { Button, useWalletModal } from '@pancakeswap-libs/uikit'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport useI18n from 'hooks/useI18n'\n\nconst UnlockButton = (props) => {\n  const TranslateString = useI18n()\n  const { connect, reset } = useWallet()\n  const { onPresentConnectModal } = useWalletModal(connect, reset)\n\n  return (\n    <Button onClick={onPresentConnectModal} {...props}>\n      {TranslateString(292, 'Unlock Wallet')}\n    </Button>\n  )\n}\n\nexport default UnlockButton\n","import Web3 from 'web3'\nimport { provider as ProviderType } from 'web3-core'\nimport { Contract } from 'web3-eth-contract'\nimport { AbiItem } from 'web3-utils'\nimport erc20 from 'config/abi/erc20.json'\n\nexport const getContract = (provider: ProviderType, address: string) => {\n  const web3 = new Web3(provider)\n  const contract = new web3.eth.Contract((erc20 as unknown) as AbiItem, address)\n  return contract\n}\n\nexport const getAllowance = async (\n  lpContract: Contract,\n  masterChefContract: Contract,\n  account: string,\n): Promise<string> => {\n  try {\n    const allowance: string = await lpContract.methods.allowance(account, masterChefContract.options.address).call()\n    return allowance\n  } catch (e) {\n    return '0'\n  }\n}\n\nexport const getTokenBalance = async (\n  provider: ProviderType,\n  tokenAddress: string,\n  userAddress: string,\n): Promise<string> => {\n  const contract = getContract(provider, tokenAddress)\n  try {\n    const balance: string = await contract.methods.balanceOf(userAddress).call()\n    return balance\n  } catch (e) {\n    return '0'\n  }\n}\n","import { useEffect, useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport multicall from 'utils/multicall'\nimport { getMasterChefAddress } from 'utils/addressHelpers'\nimport masterChefABI from 'config/abi/masterchef.json'\nimport { farmsConfig } from 'config/constants'\nimport { FarmConfig } from 'config/constants/types'\nimport useRefresh from './useRefresh'\n\nexport interface FarmWithBalance extends FarmConfig {\n  balance: BigNumber\n}\n\nconst useFarmsWithBalance = () => {\n  const [farmsWithBalances, setFarmsWithBalances] = useState<FarmWithBalance[]>([])\n  const { account } = useWallet()\n  const { fastRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalances = async () => {\n      const calls = farmsConfig.map((farm) => ({\n        address: getMasterChefAddress(),\n        name: 'pendingBeast',\n        params: [farm.pid, account],\n      }))\n\n      const rawResults = await multicall(masterChefABI, calls)\n      const results = farmsConfig.map((farm, index) => ({ ...farm, balance: new BigNumber(rawResults[index]) }))\n\n      setFarmsWithBalances(results)\n    }\n\n    if (account) {\n      fetchBalances()\n    }\n  }, [account, fastRefresh])\n\n  return farmsWithBalances\n}\n\nexport default useFarmsWithBalance\n","import React, { useEffect, useRef } from 'react'\nimport { useCountUp } from 'react-countup'\nimport { Text } from '@pancakeswap-libs/uikit'\n\ninterface CardValueProps {\n  value: number\n  decimals?: number\n  fontSize?: string\n  prefix?: string\n  suffix?: string\n}\n\nconst CardValue: React.FC<CardValueProps> = ({ value, decimals, fontSize = '40px', prefix, suffix }) => {\n  const { countUp, update } = useCountUp({\n    start: 0,\n    end: value,\n    duration: 1,\n    separator: ',',\n    decimals:\n      // eslint-disable-next-line no-nested-ternary\n      decimals !== undefined ? decimals : value < 0 ? 4 : value > 1e5 ? 0 : 3,\n  })\n\n  const updateValue = useRef(update)\n\n  useEffect(() => {\n    updateValue.current(value)\n  }, [value, updateValue])\n\n  return (\n    <Text bold fontSize={fontSize}>\n      {prefix}{countUp}{suffix}\n    </Text>\n  )\n}\n\nexport default CardValue\n","import React from 'react'\nimport { Text } from '@pancakeswap-libs/uikit'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport CardValue from './CardValue'\n\nconst CakeHarvestBalance = ({earningsSum}) => {\n  const { account } = useWallet()\n\n  if (!account) {\n    return (\n      <Text color=\"textDisabled\" style={{ lineHeight: '60px' }}>\n        Locked\n      </Text>\n    )\n  }\n\n  return <CardValue value={earningsSum} />\n}\n\nexport default CakeHarvestBalance\n","import React from 'react'\nimport { Text } from '@pancakeswap-libs/uikit'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport CardValue from './CardValue'\n\nconst CakeWalletBalance = ({ cakeBalance }) => {\n  const { account } = useWallet()\n\n  if (!account) {\n    return (\n      <Text color=\"textDisabled\" style={{ lineHeight: '36px' }}>\n        Locked\n      </Text>\n    )\n  }\n\n  return <CardValue value={cakeBalance} fontSize=\"24px\" />\n}\n\nexport default CakeWalletBalance\n","import { useEffect, useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { provider } from 'web3-core'\nimport cakeABI from 'config/abi/cake.json'\nimport { getContract } from 'utils/web3'\nimport { getTokenBalance } from 'utils/erc20'\nimport { getCakeAddress } from 'utils/addressHelpers'\nimport useRefresh from './useRefresh'\n\nconst useTokenBalance = (tokenAddress: string) => {\n  const [balance, setBalance] = useState(new BigNumber(0))\n  const { account, ethereum }: { account: string; ethereum: provider } = useWallet()\n  const { fastRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const res = await getTokenBalance(ethereum, tokenAddress, account)\n      setBalance(new BigNumber(res))\n    }\n\n    if (account && ethereum) {\n      fetchBalance()\n    }\n  }, [account, ethereum, tokenAddress, fastRefresh])\n\n  return balance\n}\n\nexport const useTotalSupply = () => {\n  const { slowRefresh } = useRefresh()\n  const [totalSupply, setTotalSupply] = useState<BigNumber>()\n\n  useEffect(() => {\n    async function fetchTotalSupply() {\n      const cakeContract = getContract(cakeABI, getCakeAddress())\n      const supply = await cakeContract.methods.totalSupply().call()\n      setTotalSupply(new BigNumber(supply))\n    }\n\n    fetchTotalSupply()\n  }, [slowRefresh])\n\n  return totalSupply\n}\n\nexport const useBurnedBalance = (tokenAddress: string) => {\n  const [balance, setBalance] = useState(new BigNumber(0))\n  const { slowRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const cakeContract = getContract(cakeABI, getCakeAddress())\n      const bal = await cakeContract.methods.balanceOf('0x000000000000000000000000000000000000dEaD').call()\n      setBalance(new BigNumber(bal))\n    }\n\n    fetchBalance()\n  }, [tokenAddress, slowRefresh])\n\n  return balance\n}\n\nexport default useTokenBalance\n","import { useEffect, useState } from 'react'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport multicall from 'utils/multicall'\nimport { getMasterChefAddress } from 'utils/addressHelpers'\nimport masterChefABI from 'config/abi/masterchef.json'\nimport { farmsConfig } from 'config/constants'\nimport useRefresh from './useRefresh'\n\nconst useAllEarnings = () => {\n  const [balances, setBalance] = useState([])\n  const { account }: { account: string } = useWallet()\n  const { fastRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchAllBalances = async () => {\n      const calls = farmsConfig.map((farm) => ({\n        address: getMasterChefAddress(),\n        name: 'pendingBeast',\n        params: [farm.pid, account],\n      }))\n\n      const res = await multicall(masterChefABI, calls)\n\n      setBalance(res)\n    }\n\n    if (account) {\n      fetchAllBalances()\n    }\n  }, [account, fastRefresh])\n\n  return balances\n}\n\nexport default useAllEarnings\n","import React, { useState, useCallback } from 'react'\nimport styled from 'styled-components'\nimport { Heading, Card, CardBody, Button } from '@pancakeswap-libs/uikit'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport BigNumber from 'bignumber.js'\nimport { useAllHarvest } from 'hooks/useHarvest'\nimport useFarmsWithBalance from 'hooks/useFarmsWithBalance'\nimport UnlockButton from 'components/UnlockButton'\nimport CakeHarvestBalance from './CakeHarvestBalance'\nimport CakeWalletBalance from './CakeWalletBalance'\nimport { usePriceCakeBusd } from '../../../state/hooks'\nimport useTokenBalance from '../../../hooks/useTokenBalance'\nimport { getCakeAddress } from '../../../utils/addressHelpers'\nimport useAllEarnings from '../../../hooks/useAllEarnings'\nimport { getBalanceNumber } from '../../../utils/formatBalance'\n\nconst StyledFarmStakingCard = styled(Card)`\n  background-image: url('/images/beast-token-transparent.png');\n  background-repeat: no-repeat;\n  background-position: top right;\n  background-size: contain;\n  background-position-x: 75px;\n  background-position-y: -105px;\n  background-color: #100000;\n  min-height: 376px;\n  border-radius: 0;\n  border: 1px solid #ff9372;\n`\n\nconst Block = styled.div`\n  margin-bottom: 16px;\n`\n\nconst CardImage = styled.img`\n  margin-bottom: 16px;\n`\n\nconst Label = styled.div`\n  color: ${({ theme }) => theme.colors.textSubtle};\n  font-size: 14px;\n`\n\nconst Actions = styled.div`\n  margin-top: 24px;\n`\n\nconst FarmedStakingCard = () => {\n  const [pendingTx, setPendingTx] = useState(false)\n  const { account } = useWallet()\n  const farmsWithBalance = useFarmsWithBalance()\n  const cakeBalance = getBalanceNumber(useTokenBalance(getCakeAddress()))\n  const beastPrice = usePriceCakeBusd().toNumber()\n  const allEarnings = useAllEarnings()\n  const earningsSum = allEarnings.reduce((accum, earning) => {\n    return accum + new BigNumber(earning).div(new BigNumber(10).pow(18)).toNumber()\n  }, 0)\n  const balancesWithValue = farmsWithBalance.filter((balanceType) => balanceType.balance.toNumber() > 0)\n\n  const { onReward } = useAllHarvest(balancesWithValue.map((farmWithBalance) => farmWithBalance.pid))\n\n  const harvestAllFarms = useCallback(async () => {\n    setPendingTx(true)\n    try {\n      await onReward()\n    } catch (error) {\n      // Find a way to handle when the user rejects transaction or it fails\n    } finally {\n      setPendingTx(false)\n    }\n  }, [onReward])\n\n  return (\n    <StyledFarmStakingCard>\n      <CardBody>\n        <Heading size=\"xl\" mb=\"24px\">\n          Farms & Pools\n        </Heading>\n        <CardImage src=\"/images/beast-token-sm2.png\" alt=\"cake logo\" width={64} height={64} />\n        <Block>\n          <Label>BEAST to Harvest</Label>\n          <CakeHarvestBalance earningsSum={earningsSum}/>\n          <Label>~${(beastPrice * earningsSum).toFixed(2)}</Label>\n        </Block>\n        <Block>\n          <Label>BEAST in Wallet</Label>\n          <CakeWalletBalance cakeBalance={cakeBalance} />\n          <Label>~${(beastPrice * cakeBalance).toFixed(2)}</Label>\n        </Block>\n        <Actions>\n          {account ? (\n            <Button\n              id=\"harvest-all\"\n              disabled={balancesWithValue.length <= 0 || pendingTx}\n              onClick={harvestAllFarms}\n              fullWidth\n            >\n              {pendingTx\n                ? \"Collecting BEAST\"\n                : `Harvest all (${balancesWithValue.length})`}\n            </Button>\n          ) : (\n            <UnlockButton fullWidth />\n          )}\n        </Actions>\n      </CardBody>\n    </StyledFarmStakingCard>\n  )\n}\n\nexport default FarmedStakingCard\n","import React, { useEffect, useState } from \"react\";\nimport { Card, CardBody, Heading, Text } from \"@pancakeswap-libs/uikit\";\nimport BigNumber from \"bignumber.js/bignumber\";\nimport styled from \"styled-components\";\nimport { getBalanceNumber } from \"utils/formatBalance\";\nimport { useTotalSupply, useBurnedBalance } from \"hooks/useTokenBalance\";\nimport { getCakeAddress } from \"utils/addressHelpers\";\nimport beastTokenABI from \"config/abi/beastToken.json\";\nimport { getContract } from \"utils/web3\";\nimport CardValue from \"./CardValue\";\nimport { useFarms, usePriceCakeBusd } from \"../../../state/hooks\";\n\nconst StyledCakeStats = styled(Card)`\n  margin-left: auto;\n  margin-right: auto;\n  border-radius: 0;\n  border: 1px solid #ff9372;\n  background-color: #100000;\n`\n\nconst Row = styled.div`\n  align-items: center;\n  display: flex;\n  font-size: 14px;\n  justify-content: space-between;\n  margin-bottom: 8px;\n`\n\nconst CakeStats = () => {\n  const totalSupply = useTotalSupply()\n  const burnedBalance = useBurnedBalance(getCakeAddress())\n  const farms = useFarms();\n  const beastPrice = usePriceCakeBusd();\n  const circSupply = totalSupply ? totalSupply.minus(burnedBalance) : new BigNumber(0);\n  const cakeSupply = getBalanceNumber(circSupply);\n  const marketCap = beastPrice.times(circSupply);\n  const [maxTransferAmount, setMaxTransferAmount] = useState(0);\n  const [transferTax, setTransferTax] = useState(0);\n\n  let beastPerBlock = 0;\n  if (farms && farms[0] && farms[0].beastPerBlock) {\n    beastPerBlock = new BigNumber(farms[0].beastPerBlock).div(new BigNumber(10).pow(18)).toNumber();\n  }\n\n  useEffect(() => {\n    async function GetMaxTransferAmount() {\n      const cakeContract = getContract(beastTokenABI, getCakeAddress());\n      const response = await cakeContract.methods.maxTransferAmount().call();\n      const mta = new BigNumber(response).div(new BigNumber(\"1000000000000000000\")).toFixed(5);\n      const mta2 = new BigNumber(mta).toNumber();\n      setMaxTransferAmount(mta2);\n\n      const response2 = await cakeContract.methods.transferTaxRate().call();\n      const ttr = new BigNumber(response2).dividedBy(100).toNumber();\n      setTransferTax(ttr);\n    }\n\n    GetMaxTransferAmount();\n  });\n\n  return (\n    <StyledCakeStats>\n      <CardBody>\n        <Heading size=\"xl\" mb=\"24px\">\n          BEAST Stats\n        </Heading>\n        <Row>\n          <Text fontSize=\"14px\">Market Cap</Text>\n          <CardValue fontSize=\"14px\" value={getBalanceNumber(marketCap)} decimals={0} prefix=\"$\" />\n        </Row>\n        <Row>\n          <Text fontSize=\"14px\">Circulating Supply</Text>\n          {cakeSupply && <CardValue fontSize=\"14px\" value={cakeSupply} decimals={0} />}\n        </Row>\n        <Row>\n          <Text fontSize=\"14px\">Total Burned</Text>\n          <CardValue fontSize=\"14px\" value={getBalanceNumber(burnedBalance)} decimals={0} />\n        </Row>\n        <Row>\n          <Text fontSize=\"14px\">Total Minted</Text>\n          {totalSupply && <CardValue fontSize=\"14px\" value={getBalanceNumber(totalSupply)} decimals={0} />}\n        </Row>\n        <Row>\n          <Text fontSize=\"14px\">New BEAST/block</Text>\n          <Text bold fontSize=\"14px\">{beastPerBlock}</Text>\n        </Row>\n        <Row>\n          <Text fontSize=\"14px\">Max Transaction Amount</Text>\n          <CardValue fontSize=\"14px\" decimals={5} value={maxTransferAmount} />\n        </Row>\n        <Row>\n          <Text fontSize=\"14px\">Transfer Tax</Text>\n          <CardValue fontSize=\"14px\" decimals={1} value={transferTax} suffix=\"%\" />\n        </Row>\n      </CardBody>\n    </StyledCakeStats>\n  )\n}\n\nexport default CakeStats\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport { Card, CardBody, Heading } from \"@pancakeswap-libs/uikit\";\nimport { useTotalValue } from \"../../../state/hooks\";\nimport CardValue from \"./CardValue\";\n\nconst StyledTotalValueLockedCard = styled(Card)`\n  margin-left: auto;\n  margin-right: auto;\n  border-radius: 0;\n  border: 1px solid #ff9372;\n  background-color: #100000;\n`;\n\nconst SubHeading = styled(Card)`\n  padding-top: 8px;\n  font-size: 18px;\n  color: #c9c4d4;\n  border-radius: 0;\n`;\n\nconst TotalValueLockedCard = () => {\n  const totalValue = useTotalValue();\n\n  return (\n    <StyledTotalValueLockedCard>\n      <CardBody>\n        <Heading size=\"xl\" mb=\"24px\">\n          <div>Total Value Locked</div>\n\n          <SubHeading>Across all Farms and Pools</SubHeading>\n        </Heading>\n\n        <>\n          <CardValue value={totalValue.toNumber()} prefix=\"$\" decimals={2}/>\n        </>\n      </CardBody>\n    </StyledTotalValueLockedCard>\n  );\n};\n\nexport default TotalValueLockedCard;\n","import React from \"react\";\nimport { Card, CardBody, Heading } from \"@pancakeswap-libs/uikit\";\nimport styled from \"styled-components\";\nimport { Timeline } from \"react-twitter-widgets\";\n\nconst StyledTwitterCard = styled(Card)`\n  margin-left: auto;\n  margin-right: auto;\n  border-radius: 0;\n  border: 1px solid #ff9372;\n  background-color: #100000;\n`;\n\nconst TwitterCard = () => {\n  return (\n    <StyledTwitterCard>\n      <CardBody>\n        <Heading size=\"xl\" mb=\"24px\">\n          Announcements\n        </Heading>\n        <Timeline\n          dataSource={{\n            sourceType: \"profile\",\n            screenName: \"BeastModeToken\"\n          }}\n          options={{\n            height: \"320\",\n            chrome: \"noheader, nofooter\",\n            width: \"400\"\n          }}\n        />\n      </CardBody>\n    </StyledTwitterCard>\n  );\n}\n\nexport default TwitterCard;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport { BaseLayout } from \"@pancakeswap-libs/uikit\";\nimport Page from \"components/layout/Page\";\nimport FarmStakingCard from \"./components/FarmStakingCard\";\nimport CakeStats from \"./components/CakeStats\";\nimport TotalValueLockedCard from \"./components/TotalValueLockedCard\";\nimport TwitterCard from \"./components/TwitterCard\";\n\nconst Hero = styled.div`\n  align-items: center;\n  background-image: url('/images/beast-banner.png');\n  background-repeat: no-repeat;\n  background-position: top center;\n  background-size: contain;\n  display: flex;\n  justify-content: center;\n  flex-direction: column;\n  margin: auto;\n  margin-bottom: 32px;\n  padding-top: 116px;\n  text-align: center;\n`;\n\nconst Cards = styled(BaseLayout)`\n  align-items: stretch;\n  justify-content: stretch;\n  margin-bottom: 48px;\n\n  & > div {\n    grid-column: span 6;\n    width: 100%;\n  }\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    & > div {\n      grid-column: span 8;\n    }\n  }\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    & > div {\n      grid-column: span 6;\n    }\n  }\n`;\n\nconst Home: React.FC = () => {\n  return (\n    <Page>\n      <Hero />\n\n      <div>\n        <Cards>\n          <FarmStakingCard />\n          <TwitterCard/>\n          <CakeStats />\n          <TotalValueLockedCard />\n        </Cards>\n      </div>\n    </Page>\n  );\n};\n\nexport default Home;\n"],"sourceRoot":""}