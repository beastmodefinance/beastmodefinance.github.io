{"version":3,"sources":["utils/formatBalance.ts","utils/callHelpers.ts","hooks/useHarvest.ts","components/UnlockButton.tsx","utils/erc20.ts","hooks/useFarmsWithBalance.ts","views/Home/components/CardValue.tsx","views/Home/components/CakeHarvestBalance.tsx","views/Home/components/CakeWalletBalance.tsx","hooks/useTokenBalance.ts","hooks/useAllEarnings.ts","views/Home/components/FarmStakingCard.tsx","views/Home/components/CakeStats.tsx","views/Home/components/TotalValueLockedCard.tsx","views/Home/components/TwitterCard.tsx","views/Home/Home.tsx"],"names":["getBalanceNumber","balance","decimals","displayBalance","BigNumber","dividedBy","pow","toNumber","getFullDisplayBalance","toFixed","approve","lpContract","masterChefContract","account","a","methods","options","address","ethers","constants","MaxUint256","send","from","stake","pid","amount","deposit","times","toString","on","tx","transactionHash","sousStake","sousChefContract","sousStakeBnb","value","unstake","withdraw","sousUnstake","emergencyWithdraw","sousEmegencyUnstake","harvest","soushHarvest","soushHarvestBnb","useHarvest","farmPid","dispatch","useDispatch","useWallet","useMasterchef","onReward","useCallback","txHash","fetchFarmUserDataAsync","useAllHarvest","farmPids","harvestPromises","reduce","accum","Promise","all","useSousHarvest","sousId","isUsingBnb","useSousChef","handleHarvest","updateUserPendingReward","updateUserBalance","UnlockButton","props","TranslateString","useI18n","connect","reset","onPresentConnectModal","useWalletModal","onClick","getContract","provider","Web3","eth","Contract","erc20","getTokenBalance","tokenAddress","userAddress","contract","balanceOf","call","useFarmsWithBalance","useState","farmsWithBalances","setFarmsWithBalances","fastRefresh","useRefresh","useEffect","calls","farmsConfig","map","farm","getMasterChefAddress","name","params","multicall","masterChefABI","rawResults","results","index","fetchBalances","CardValue","fontSize","prefix","useCountUp","start","end","duration","separator","undefined","countUp","update","updateValue","useRef","current","bold","CakeHarvestBalance","earningsSum","color","style","lineHeight","CakeWalletBalance","cakeBalance","useTokenBalance","setBalance","ethereum","res","fetchBalance","useAllEarnings","balances","fetchAllBalances","StyledFarmStakingCard","styled","Card","Block","div","CardImage","img","Label","theme","colors","textSubtle","Actions","FarmedStakingCard","pendingTx","setPendingTx","farmsWithBalance","getCakeAddress","eggPrice","usePriceCakeBusd","earning","balancesWithValue","filter","balanceType","farmWithBalance","harvestAllFarms","size","mb","src","alt","width","height","id","disabled","length","fullWidth","StyledCakeStats","Row","CakeStats","totalSupply","slowRefresh","setTotalSupply","cakeContract","cakeABI","supply","fetchTotalSupply","useTotalSupply","burnedBalance","bal","useBurnedBalance","farms","useFarms","circSupply","minus","cakeSupply","marketCap","eggPerBlock","StyledTotalValueLockedCard","SubHeading","TotalValueLockedCard","totalValue","useTotalValue","StyledTwitterCard","TwitterCard","dataSource","sourceType","screenName","chrome","Hero","Cards","BaseLayout","mediaQueries","sm","lg","Home","Page","FarmStakingCard"],"mappings":"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","file":"static/js/12.d54fcef5.chunk.js","sourcesContent":["import BigNumber from 'bignumber.js'\n\nexport const getBalanceNumber = (balance: BigNumber, decimals = 18) => {\n  const displayBalance = new BigNumber(balance).dividedBy(new BigNumber(10).pow(decimals))\n  return displayBalance.toNumber()\n}\n\nexport const getFullDisplayBalance = (balance: BigNumber, decimals = 18) => {\n  return balance.dividedBy(new BigNumber(10).pow(decimals)).toFixed()\n}\n","import BigNumber from 'bignumber.js'\nimport { ethers } from 'ethers'\n\nexport const approve = async (lpContract, masterChefContract, account) => {\n  return lpContract.methods\n    .approve(masterChefContract.options.address, ethers.constants.MaxUint256)\n    .send({ from: account })\n}\n\nexport const stake = async (masterChefContract, pid, amount, account) => {\n  return masterChefContract.methods\n    .deposit(pid, new BigNumber(amount).times(new BigNumber(10).pow(18)).toString())\n    .send({ from: account })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const sousStake = async (sousChefContract, amount, account) => {\n  return sousChefContract.methods\n    .deposit(new BigNumber(amount).times(new BigNumber(10).pow(18)).toString())\n    .send({ from: account })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const sousStakeBnb = async (sousChefContract, amount, account) => {\n  return sousChefContract.methods\n    .deposit()\n    .send({ from: account, value: new BigNumber(amount).times(new BigNumber(10).pow(18)).toString() })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const unstake = async (masterChefContract, pid, amount, account) => {\n  return masterChefContract.methods\n    .withdraw(pid, new BigNumber(amount).times(new BigNumber(10).pow(18)).toString())\n    .send({ from: account })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const sousUnstake = async (sousChefContract, amount, account) => {\n  // shit code: hard fix for old CTK and BLK\n  if (sousChefContract.options.address === '0x3B9B74f48E89Ebd8b45a53444327013a2308A9BC') {\n    return sousChefContract.methods\n      .emergencyWithdraw()\n      .send({ from: account })\n      .on('transactionHash', (tx) => {\n        return tx.transactionHash\n      })\n  }\n  if (sousChefContract.options.address === '0xBb2B66a2c7C2fFFB06EA60BeaD69741b3f5BF831') {\n    return sousChefContract.methods\n      .emergencyWithdraw()\n      .send({ from: account })\n      .on('transactionHash', (tx) => {\n        return tx.transactionHash\n      })\n  }\n  return sousChefContract.methods\n    .withdraw(new BigNumber(amount).times(new BigNumber(10).pow(18)).toString())\n    .send({ from: account })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const sousEmegencyUnstake = async (sousChefContract, amount, account) => {\n  return sousChefContract.methods\n    .emergencyWithdraw()\n    .send({ from: account })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const harvest = async (masterChefContract, pid, account) => {\n  return masterChefContract.methods\n    .deposit(pid, '0')\n    .send({ from: account })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const soushHarvest = async (sousChefContract, account) => {\n  return sousChefContract.methods\n    .deposit('0')\n    .send({ from: account })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const soushHarvestBnb = async (sousChefContract, account) => {\n  return sousChefContract.methods\n    .deposit()\n    .send({ from: account, value: new BigNumber(0) })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n","import { useCallback } from 'react'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { useDispatch } from 'react-redux'\nimport { fetchFarmUserDataAsync, updateUserBalance, updateUserPendingReward } from 'state/actions'\nimport { soushHarvest, soushHarvestBnb, harvest } from 'utils/callHelpers'\nimport { useMasterchef, useSousChef } from './useContract'\n\nexport const useHarvest = (farmPid: number) => {\n  const dispatch = useDispatch()\n  const { account } = useWallet()\n  const masterChefContract = useMasterchef()\n\n  const handleHarvest = useCallback(async () => {\n    const txHash = await harvest(masterChefContract, farmPid, account)\n    dispatch(fetchFarmUserDataAsync(account))\n    return txHash\n  }, [account, dispatch, farmPid, masterChefContract])\n\n  return { onReward: handleHarvest }\n}\n\nexport const useAllHarvest = (farmPids: number[]) => {\n  const { account } = useWallet()\n  const masterChefContract = useMasterchef()\n\n  const handleHarvest = useCallback(async () => {\n    const harvestPromises = farmPids.reduce((accum, pid) => {\n      return [...accum, harvest(masterChefContract, pid, account)]\n    }, [])\n\n    return Promise.all(harvestPromises)\n  }, [account, farmPids, masterChefContract])\n\n  return { onReward: handleHarvest }\n}\n\nexport const useSousHarvest = (sousId, isUsingBnb = false) => {\n  const dispatch = useDispatch()\n  const { account } = useWallet()\n  const sousChefContract = useSousChef(sousId)\n  const masterChefContract = useMasterchef()\n\n  const handleHarvest = useCallback(async () => {\n    if (sousId === 0) {\n      await harvest(masterChefContract, 0, account)\n    } else if (isUsingBnb) {\n      await soushHarvestBnb(sousChefContract, account)\n    } else {\n      await soushHarvest(sousChefContract, account)\n    }\n    dispatch(updateUserPendingReward(sousId, account))\n    dispatch(updateUserBalance(sousId, account))\n  }, [account, dispatch, isUsingBnb, masterChefContract, sousChefContract, sousId])\n\n  return { onReward: handleHarvest }\n}\n","import React from 'react'\nimport { Button, useWalletModal } from '@pancakeswap-libs/uikit'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport useI18n from 'hooks/useI18n'\n\nconst UnlockButton = (props) => {\n  const TranslateString = useI18n()\n  const { connect, reset } = useWallet()\n  const { onPresentConnectModal } = useWalletModal(connect, reset)\n\n  return (\n    <Button onClick={onPresentConnectModal} {...props}>\n      {TranslateString(292, 'Unlock Wallet')}\n    </Button>\n  )\n}\n\nexport default UnlockButton\n","import Web3 from 'web3'\nimport { provider as ProviderType } from 'web3-core'\nimport { Contract } from 'web3-eth-contract'\nimport { AbiItem } from 'web3-utils'\nimport erc20 from 'config/abi/erc20.json'\n\nexport const getContract = (provider: ProviderType, address: string) => {\n  const web3 = new Web3(provider)\n  const contract = new web3.eth.Contract((erc20 as unknown) as AbiItem, address)\n  return contract\n}\n\nexport const getAllowance = async (\n  lpContract: Contract,\n  masterChefContract: Contract,\n  account: string,\n): Promise<string> => {\n  try {\n    const allowance: string = await lpContract.methods.allowance(account, masterChefContract.options.address).call()\n    return allowance\n  } catch (e) {\n    return '0'\n  }\n}\n\nexport const getTokenBalance = async (\n  provider: ProviderType,\n  tokenAddress: string,\n  userAddress: string,\n): Promise<string> => {\n  const contract = getContract(provider, tokenAddress)\n  try {\n    const balance: string = await contract.methods.balanceOf(userAddress).call()\n    return balance\n  } catch (e) {\n    return '0'\n  }\n}\n","import { useEffect, useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport multicall from 'utils/multicall'\nimport { getMasterChefAddress } from 'utils/addressHelpers'\nimport masterChefABI from 'config/abi/masterchef.json'\nimport { farmsConfig } from 'config/constants'\nimport { FarmConfig } from 'config/constants/types'\nimport useRefresh from './useRefresh'\n\nexport interface FarmWithBalance extends FarmConfig {\n  balance: BigNumber\n}\n\nconst useFarmsWithBalance = () => {\n  const [farmsWithBalances, setFarmsWithBalances] = useState<FarmWithBalance[]>([])\n  const { account } = useWallet()\n  const { fastRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalances = async () => {\n      const calls = farmsConfig.map((farm) => ({\n        address: getMasterChefAddress(),\n        name: 'pendingEgg',\n        params: [farm.pid, account],\n      }))\n\n      const rawResults = await multicall(masterChefABI, calls)\n      const results = farmsConfig.map((farm, index) => ({ ...farm, balance: new BigNumber(rawResults[index]) }))\n\n      setFarmsWithBalances(results)\n    }\n\n    if (account) {\n      fetchBalances()\n    }\n  }, [account, fastRefresh])\n\n  return farmsWithBalances\n}\n\nexport default useFarmsWithBalance\n","import React, { useEffect, useRef } from 'react'\nimport { useCountUp } from 'react-countup'\nimport { Text } from '@pancakeswap-libs/uikit'\n\ninterface CardValueProps {\n  value: number\n  decimals?: number\n  fontSize?: string\n  prefix?: string\n}\n\nconst CardValue: React.FC<CardValueProps> = ({ value, decimals, fontSize = '40px', prefix }) => {\n  const { countUp, update } = useCountUp({\n    start: 0,\n    end: value,\n    duration: 1,\n    separator: ',',\n    decimals:\n      // eslint-disable-next-line no-nested-ternary\n      decimals !== undefined ? decimals : value < 0 ? 4 : value > 1e5 ? 0 : 3,\n  })\n\n  const updateValue = useRef(update)\n\n  useEffect(() => {\n    updateValue.current(value)\n  }, [value, updateValue])\n\n  return (\n    <Text bold fontSize={fontSize}>\n      {prefix}{countUp}\n    </Text>\n  )\n}\n\nexport default CardValue\n","import React from 'react'\nimport { Text } from '@pancakeswap-libs/uikit'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport CardValue from './CardValue'\n\nconst CakeHarvestBalance = ({earningsSum}) => {\n  const { account } = useWallet()\n\n  if (!account) {\n    return (\n      <Text color=\"textDisabled\" style={{ lineHeight: '60px' }}>\n        Locked\n      </Text>\n    )\n  }\n\n  return <CardValue value={earningsSum} />\n}\n\nexport default CakeHarvestBalance\n","import React from 'react'\nimport { Text } from '@pancakeswap-libs/uikit'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport CardValue from './CardValue'\n\nconst CakeWalletBalance = ({ cakeBalance }) => {\n  const { account } = useWallet()\n\n  if (!account) {\n    return (\n      <Text color=\"textDisabled\" style={{ lineHeight: '36px' }}>\n        Locked\n      </Text>\n    )\n  }\n\n  return <CardValue value={cakeBalance} fontSize=\"24px\" />\n}\n\nexport default CakeWalletBalance\n","import { useEffect, useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { provider } from 'web3-core'\nimport cakeABI from 'config/abi/cake.json'\nimport { getContract } from 'utils/web3'\nimport { getTokenBalance } from 'utils/erc20'\nimport { getCakeAddress } from 'utils/addressHelpers'\nimport useRefresh from './useRefresh'\n\nconst useTokenBalance = (tokenAddress: string) => {\n  const [balance, setBalance] = useState(new BigNumber(0))\n  const { account, ethereum }: { account: string; ethereum: provider } = useWallet()\n  const { fastRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const res = await getTokenBalance(ethereum, tokenAddress, account)\n      setBalance(new BigNumber(res))\n    }\n\n    if (account && ethereum) {\n      fetchBalance()\n    }\n  }, [account, ethereum, tokenAddress, fastRefresh])\n\n  return balance\n}\n\nexport const useTotalSupply = () => {\n  const { slowRefresh } = useRefresh()\n  const [totalSupply, setTotalSupply] = useState<BigNumber>()\n\n  useEffect(() => {\n    async function fetchTotalSupply() {\n      const cakeContract = getContract(cakeABI, getCakeAddress())\n      const supply = await cakeContract.methods.totalSupply().call()\n      setTotalSupply(new BigNumber(supply))\n    }\n\n    fetchTotalSupply()\n  }, [slowRefresh])\n\n  return totalSupply\n}\n\nexport const useBurnedBalance = (tokenAddress: string) => {\n  const [balance, setBalance] = useState(new BigNumber(0))\n  const { slowRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const cakeContract = getContract(cakeABI, getCakeAddress())\n      const bal = await cakeContract.methods.balanceOf('0x000000000000000000000000000000000000dEaD').call()\n      setBalance(new BigNumber(bal))\n    }\n\n    fetchBalance()\n  }, [tokenAddress, slowRefresh])\n\n  return balance\n}\n\nexport default useTokenBalance\n","import { useEffect, useState } from 'react'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport multicall from 'utils/multicall'\nimport { getMasterChefAddress } from 'utils/addressHelpers'\nimport masterChefABI from 'config/abi/masterchef.json'\nimport { farmsConfig } from 'config/constants'\nimport useRefresh from './useRefresh'\n\nconst useAllEarnings = () => {\n  const [balances, setBalance] = useState([])\n  const { account }: { account: string } = useWallet()\n  const { fastRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchAllBalances = async () => {\n      const calls = farmsConfig.map((farm) => ({\n        address: getMasterChefAddress(),\n        name: 'pendingEgg',\n        params: [farm.pid, account],\n      }))\n\n      const res = await multicall(masterChefABI, calls)\n\n      setBalance(res)\n    }\n\n    if (account) {\n      fetchAllBalances()\n    }\n  }, [account, fastRefresh])\n\n  return balances\n}\n\nexport default useAllEarnings\n","import React, { useState, useCallback } from 'react'\nimport styled from 'styled-components'\nimport { Heading, Card, CardBody, Button } from '@pancakeswap-libs/uikit'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport BigNumber from 'bignumber.js'\nimport { useAllHarvest } from 'hooks/useHarvest'\nimport useFarmsWithBalance from 'hooks/useFarmsWithBalance'\nimport UnlockButton from 'components/UnlockButton'\nimport CakeHarvestBalance from './CakeHarvestBalance'\nimport CakeWalletBalance from './CakeWalletBalance'\nimport { usePriceCakeBusd } from '../../../state/hooks'\nimport useTokenBalance from '../../../hooks/useTokenBalance'\nimport { getCakeAddress } from '../../../utils/addressHelpers'\nimport useAllEarnings from '../../../hooks/useAllEarnings'\nimport { getBalanceNumber } from '../../../utils/formatBalance'\n\nconst StyledFarmStakingCard = styled(Card)`\n  background-image: url('/images/beast-token-transparent.png');\n  background-repeat: no-repeat;\n  background-position: top right;\n  background-size: contain;\n  background-position-x: 75px;\n  background-position-y: -105px;\n  background-color: #100000;\n  min-height: 376px;\n  border-radius: 0;\n  border: 1px solid #ff9372;\n`\n\nconst Block = styled.div`\n  margin-bottom: 16px;\n`\n\nconst CardImage = styled.img`\n  margin-bottom: 16px;\n`\n\nconst Label = styled.div`\n  color: ${({ theme }) => theme.colors.textSubtle};\n  font-size: 14px;\n`\n\nconst Actions = styled.div`\n  margin-top: 24px;\n`\n\nconst FarmedStakingCard = () => {\n  const [pendingTx, setPendingTx] = useState(false)\n  const { account } = useWallet()\n  const farmsWithBalance = useFarmsWithBalance()\n  const cakeBalance = getBalanceNumber(useTokenBalance(getCakeAddress()))\n  const eggPrice = usePriceCakeBusd().toNumber()\n  const allEarnings = useAllEarnings()\n  const earningsSum = allEarnings.reduce((accum, earning) => {\n    return accum + new BigNumber(earning).div(new BigNumber(10).pow(18)).toNumber()\n  }, 0)\n  const balancesWithValue = farmsWithBalance.filter((balanceType) => balanceType.balance.toNumber() > 0)\n\n  const { onReward } = useAllHarvest(balancesWithValue.map((farmWithBalance) => farmWithBalance.pid))\n\n  const harvestAllFarms = useCallback(async () => {\n    setPendingTx(true)\n    try {\n      await onReward()\n    } catch (error) {\n      // Find a way to handle when the user rejects transaction or it fails\n    } finally {\n      setPendingTx(false)\n    }\n  }, [onReward])\n\n  return (\n    <StyledFarmStakingCard>\n      <CardBody>\n        <Heading size=\"xl\" mb=\"24px\">\n          Farms & Pools\n        </Heading>\n        <CardImage src=\"/images/beast-token-sm2.png\" alt=\"cake logo\" width={64} height={64} />\n        <Block>\n          <Label>BEAST to Harvest</Label>\n          <CakeHarvestBalance earningsSum={earningsSum}/>\n          <Label>~${(eggPrice * earningsSum).toFixed(2)}</Label>\n        </Block>\n        <Block>\n          <Label>BEAST in Wallet</Label>\n          <CakeWalletBalance cakeBalance={cakeBalance} />\n          <Label>~${(eggPrice * cakeBalance).toFixed(2)}</Label>\n        </Block>\n        <Actions>\n          {account ? (\n            <Button\n              id=\"harvest-all\"\n              disabled={balancesWithValue.length <= 0 || pendingTx}\n              onClick={harvestAllFarms}\n              fullWidth\n            >\n              {pendingTx\n                ? \"Collecting BEAST\"\n                : `Harvest all (${balancesWithValue.length})`}\n            </Button>\n          ) : (\n            <UnlockButton fullWidth />\n          )}\n        </Actions>\n      </CardBody>\n    </StyledFarmStakingCard>\n  )\n}\n\nexport default FarmedStakingCard\n","import React from 'react'\nimport { Card, CardBody, Heading, Text } from '@pancakeswap-libs/uikit'\nimport BigNumber from 'bignumber.js/bignumber'\nimport styled from 'styled-components'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { useTotalSupply, useBurnedBalance } from 'hooks/useTokenBalance'\nimport { getCakeAddress } from 'utils/addressHelpers'\nimport CardValue from './CardValue'\nimport { useFarms, usePriceCakeBusd } from '../../../state/hooks'\n\nconst StyledCakeStats = styled(Card)`\n  margin-left: auto;\n  margin-right: auto;\n  border-radius: 0;\n  border: 1px solid #ff9372;\n  background-color: #100000;\n`\n\nconst Row = styled.div`\n  align-items: center;\n  display: flex;\n  font-size: 14px;\n  justify-content: space-between;\n  margin-bottom: 8px;\n`\n\nconst CakeStats = () => {\n  const totalSupply = useTotalSupply()\n  const burnedBalance = useBurnedBalance(getCakeAddress())\n  const farms = useFarms();\n  const eggPrice = usePriceCakeBusd();\n  const circSupply = totalSupply ? totalSupply.minus(burnedBalance) : new BigNumber(0);\n  const cakeSupply = getBalanceNumber(circSupply);\n  const marketCap = eggPrice.times(circSupply);\n\n  let eggPerBlock = 0;\n  if (farms && farms[0] && farms[0].eggPerBlock) {\n    eggPerBlock = new BigNumber(farms[0].eggPerBlock).div(new BigNumber(10).pow(18)).toNumber();\n  }\n\n  // Market Cap         | $387,450\n  // Total Minted       | 1,000,000\n  // Total Burned       | 0\n  // Circulating Supply | 1,000,000\n  // New BEAST/block    | 100\n  // Max Tx Amount      | TODO\n  // Transfer Tax       | TODO\n\n  return (\n    <StyledCakeStats>\n      <CardBody>\n        <Heading size=\"xl\" mb=\"24px\">\n          BEAST Stats\n        </Heading>\n        <Row>\n          <Text fontSize=\"14px\">Market Cap</Text>\n          <CardValue fontSize=\"14px\" value={getBalanceNumber(marketCap)} decimals={0} prefix=\"$\" />\n        </Row>\n        <Row>\n          <Text fontSize=\"14px\">Total Minted</Text>\n          {totalSupply && <CardValue fontSize=\"14px\" value={getBalanceNumber(totalSupply)} decimals={0} />}\n        </Row>\n        <Row>\n          <Text fontSize=\"14px\">Total Burned</Text>\n          <CardValue fontSize=\"14px\" value={getBalanceNumber(burnedBalance)} decimals={0} />\n        </Row>\n        <Row>\n          <Text fontSize=\"14px\">Circulating Supply</Text>\n          {cakeSupply && <CardValue fontSize=\"14px\" value={cakeSupply} decimals={0} />}\n        </Row>\n        <Row>\n          <Text fontSize=\"14px\">New BEAST/block</Text>\n          <Text bold fontSize=\"14px\">{eggPerBlock}</Text>\n        </Row>\n      </CardBody>\n    </StyledCakeStats>\n  )\n}\n\nexport default CakeStats\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport { Card, CardBody, Heading } from \"@pancakeswap-libs/uikit\";\nimport { useTotalValue } from \"../../../state/hooks\";\nimport CardValue from \"./CardValue\";\n\nconst StyledTotalValueLockedCard = styled(Card)`\n  margin-left: auto;\n  margin-right: auto;\n  border-radius: 0;\n  border: 1px solid #ff9372;\n  background-color: #100000;\n`;\n\nconst SubHeading = styled(Card)`\n  padding-top: 8px;\n  font-size: 18px;\n  color: #c9c4d4;\n  border-radius: 0;\n`;\n\nconst TotalValueLockedCard = () => {\n  const totalValue = useTotalValue();\n\n  return (\n    <StyledTotalValueLockedCard>\n      <CardBody>\n        <Heading size=\"xl\" mb=\"24px\">\n          <div>Total Value Locked</div>\n\n          <SubHeading>Across all Farms and Pools</SubHeading>\n        </Heading>\n\n        <>\n          <CardValue value={totalValue.toNumber()} prefix=\"$\" decimals={2}/>\n        </>\n      </CardBody>\n    </StyledTotalValueLockedCard>\n  );\n};\n\nexport default TotalValueLockedCard;\n","import React from \"react\";\nimport { Card, CardBody, Heading } from \"@pancakeswap-libs/uikit\";\nimport styled from \"styled-components\";\nimport { Timeline } from \"react-twitter-widgets\";\n\nconst StyledTwitterCard = styled(Card)`\n  margin-left: auto;\n  margin-right: auto;\n  border-radius: 0;\n  border: 1px solid #ff9372;\n  background-color: #100000;\n`;\n\nconst TwitterCard = () => {\n  return (\n    <StyledTwitterCard>\n      <CardBody>\n        <Heading size=\"xl\" mb=\"24px\">\n          Announcements\n        </Heading>\n        <Timeline\n          dataSource={{\n            sourceType: \"profile\",\n            screenName: \"cz_binance\"\n          }}\n          options={{\n            height: \"320\",\n            chrome: \"noheader, nofooter\",\n            width: \"400\"\n          }}\n        />\n      </CardBody>\n    </StyledTwitterCard>\n  );\n}\n\nexport default TwitterCard;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport { BaseLayout } from \"@pancakeswap-libs/uikit\";\nimport Page from \"components/layout/Page\";\nimport FarmStakingCard from \"./components/FarmStakingCard\";\nimport CakeStats from \"./components/CakeStats\";\nimport TotalValueLockedCard from \"./components/TotalValueLockedCard\";\nimport TwitterCard from \"./components/TwitterCard\";\n\nconst Hero = styled.div`\n  align-items: center;\n  background-image: url('/images/beast-banner.png');\n  background-repeat: no-repeat;\n  background-position: top center;\n  background-size: contain;\n  display: flex;\n  justify-content: center;\n  flex-direction: column;\n  margin: auto;\n  margin-bottom: 32px;\n  padding-top: 116px;\n  text-align: center;\n`;\n\nconst Cards = styled(BaseLayout)`\n  align-items: stretch;\n  justify-content: stretch;\n  margin-bottom: 48px;\n\n  & > div {\n    grid-column: span 6;\n    width: 100%;\n  }\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    & > div {\n      grid-column: span 8;\n    }\n  }\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    & > div {\n      grid-column: span 6;\n    }\n  }\n`;\n\nconst Home: React.FC = () => {\n  return (\n    <Page>\n      <Hero />\n\n      <div>\n        <Cards>\n          <FarmStakingCard />\n          <TwitterCard/>\n          <CakeStats />\n          <TotalValueLockedCard />\n        </Cards>\n      </div>\n    </Page>\n  );\n};\n\nexport default Home;\n"],"sourceRoot":""}