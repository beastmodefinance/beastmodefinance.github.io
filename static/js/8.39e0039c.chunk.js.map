{"version":3,"sources":["utils/formatBalance.ts","utils/callHelpers.ts","components/Spacer/Spacer.tsx","components/ModalActions/ModalActions.tsx","hooks/useHarvest.ts","components/UnlockButton.tsx","components/Input/Input.tsx","components/TokenInput/TokenInput.tsx","utils/erc20.ts","config/index.ts","components/layout/Flex.tsx","components/Tags.tsx","hooks/useApprove.ts","hooks/useStake.ts","hooks/useUnstake.ts","components/ExpandableSectionButton/ExpandableSectionButton.tsx","utils/getLiquidityUrlPathParts.ts","views/Farms/components/FarmCard/DetailsSection.tsx","views/Farms/components/FarmCard/CardHeading.tsx","views/Farms/components/DepositModal.tsx","views/Farms/components/WithdrawModal.tsx","views/Farms/components/FarmCard/StakeAction.tsx","views/Farms/components/FarmCard/HarvestAction.tsx","views/Farms/components/FarmCard/CardActionsContainer.tsx","utils/compoundApyHelpers.ts","views/Farms/components/FarmCard/ApyCalculatorModal.tsx","views/Farms/components/FarmCard/ApyButton.tsx","views/Farms/components/FarmCard/FarmCard.tsx","views/Farms/components/FarmTabButtons/index.tsx","views/Farms/Farms.tsx"],"names":["getBalanceNumber","balance","decimals","displayBalance","BigNumber","dividedBy","pow","toNumber","getFullDisplayBalance","toFixed","approve","lpContract","masterChefContract","account","a","methods","options","address","ethers","constants","MaxUint256","send","from","stake","pid","amount","referrer","document","cookie","indexOf","START","END","substring","deposit","times","toString","on","tx","transactionHash","unstake","withdraw","harvest","StyledSpacer","styled","div","props","size","Spacer","s","spacing","useContext","ThemeContext","StyledModalActions","theme","StyledModalAction","ModalActions","children","l","React","Children","toArray","length","map","child","i","useHarvest","farmPid","dispatch","useDispatch","useWallet","useMasterchef","onReward","useCallback","txHash","fetchFarmUserDataAsync","useAllHarvest","farmPids","harvestPromises","reduce","accum","Promise","all","useSousHarvest","sousId","useSousChef","handleHarvest","updateUserPendingReward","updateUserBalance","UnlockButton","TranslateString","useI18n","connect","reset","onPresentConnectModal","useWalletModal","onClick","StyledInputWrapper","colors","input","radii","default","StyledInput","primary","Input","endAdornment","onChange","placeholder","startAdornment","value","StyledTokenInput","StyledTokenAdornmentWrapper","StyledMaxText","StyledTokenSymbol","span","TokenInput","max","symbol","onSelectMax","depositFeeBP","toLocaleString","getContract","provider","Web3","eth","Contract","erc20","getTokenBalance","tokenAddress","userAddress","contract","balanceOf","call","config","EXPONENTIAL_AT","DECIMAL_PLACES","BLOCKS_PER_YEAR","FlexLayout","NoFeeTag","variant","outline","startIcon","CoreTag","CommunityTag","BinanceTag","useApprove","onApprove","useSousApprove","sousChefContract","updateUserAllowance","useSousStake","handleStake","updateUserStakedBalance","onStake","useStake","console","info","useSousUnstake","onUnstake","useUnstake","Wrapper","ExpandableSectionButton","expanded","aria-label","role","color","bold","defaultProps","getLiquidityUrlPathParts","tokenSymbol","tokenAddresses","quoteTokenSymbol","quoteTokenAdresses","firstPart","process","secondPart","StyledLinkExternal","LinkExternal","text","DetailsSection","isTokenOnly","bscScanAddress","removed","totalValueFormated","lpLabel","liquidityUrlPathParts","justifyContent","href","external","Flex","MultiplierTag","Tag","CardHeading","multiplier","farmImage","risk","depositFee","alignItems","mb","style","display","flexDirection","src","alt","width","height","DepositModal","onConfirm","onDismiss","tokenName","useState","val","setVal","pendingTx","setPendingTx","fullBalance","useMemo","handleChange","e","currentTarget","handleSelectMax","title","disabled","WithdrawModal","IconButtonWrapper","StakeAction","stakedBalance","tokenBalance","rawStakedBalance","useModal","onPresentDeposit","onPresentWithdraw","mr","BalanceAndCompound","LockupButton","HarvestAction","earnings","harvestLockup","minutes","rawEarningsBalance","Action","CardActions","farm","ethereum","requestedApproval","setRequestedApproval","useFarmFromPid","lpAddresses","useFarmUser","allowance","lpAddress","lpName","lpSymbol","toUpperCase","isApproved","isGreaterThan","handleApprove","error","nextHarvestUntil","userData","currentTime","Math","floor","Date","now","seconds","textTransform","fontSize","pr","marginBottom","fullWidth","calculateCakeEarnedPerThousandDollars","number","numberOfDays","apyAsDecimal","farmApy","daysAsDecimalOfYear","principal","cakePrice","finalAmount","round","apyModalRoi","amountEarned","amountInvested","Grid","GridItem","Description","Text","ApyCalculatorModal","apy","oneThousandDollarsWorthOfCake","cakeEarnedPerThousand1D","cakeEarnedPerThousand7D","cakeEarnedPerThousand30D","cakeEarnedPerThousand365D","ApyButton","onPresentApyModal","ml","RainbowLight","keyframes","StyledCardAccent","FCard","Divider","borderColor","ExpandingWrapper","FarmCard","bnbPrice","btcPrice","showExpandableSection","setShowExpandableSection","toLowerCase","totalValue","lpTotalInQuoteToken","Number","undefined","maximumFractionDigits","farmAPY","minimumFractionDigits","border","CardActionsContainer","ToggleWrapper","FarmTabButtons","stakedOnly","setStakedOnly","useRouteMatch","url","isExact","checked","activeIndex","as","Link","to","Hero","Title","Subtitle","Farms","farmsProps","path","farmsLP","useFarms","usePriceCakeBusd","usePriceBnbBusd","usePriceBitcoin","tokenMode","fastRefresh","useRefresh","useEffect","activeFarms","filter","inactiveFarms","stakedOnlyFarms","farmsList","farmsToDisplay","cakeRewardPerYear","beastPerBlock","poolWeight","comparedTo","Page","exact"],"mappings":"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","file":"static/js/8.39e0039c.chunk.js","sourcesContent":["import BigNumber from 'bignumber.js'\n\nexport const getBalanceNumber = (balance: BigNumber, decimals = 18) => {\n  const displayBalance = new BigNumber(balance).dividedBy(new BigNumber(10).pow(decimals))\n  return displayBalance.toNumber()\n}\n\nexport const getFullDisplayBalance = (balance: BigNumber, decimals = 18) => {\n  return balance.dividedBy(new BigNumber(10).pow(decimals)).toFixed()\n}\n","import BigNumber from 'bignumber.js'\nimport { ethers } from 'ethers'\n\nexport const approve = async (lpContract, masterChefContract, account) => {\n  return lpContract.methods\n    .approve(masterChefContract.options.address, ethers.constants.MaxUint256)\n    .send({ from: account })\n}\n\nexport const stake = async (masterChefContract, pid, amount, account) => {\n  let referrer = \"0x0000000000000000000000000000000000000000\";\n\n  if (document.cookie.indexOf(\"refer=\") !== -1) {\n    const START = document.cookie.indexOf(\"refer=\") + 6;\n    const END = document.cookie.substring(START).indexOf(\";\");\n\n    if (END === -1) {\n      referrer = document.cookie.substring(START);\n    } else {\n      referrer = document.cookie.substring(START).substring(0, END);\n    }\n  }\n\n  return masterChefContract.methods.deposit(\n    pid,                                                               // uint256 _pid\n    new BigNumber(amount).times(new BigNumber(10).pow(18)).toString(), // uint256 _amount\n    referrer                                                           // address _referrer\n  )\n  .send({ from: account })\n  .on(\"transactionHash\", (tx) => {\n    return tx.transactionHash\n  });\n}\n\nexport const sousStake = async (sousChefContract, amount, account) => {\n  return sousChefContract.methods\n    .deposit(new BigNumber(amount).times(new BigNumber(10).pow(18)).toString())\n    .send({ from: account })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const sousStakeBnb = async (sousChefContract, amount, account) => {\n  return sousChefContract.methods\n    .deposit()\n    .send({ from: account, value: new BigNumber(amount).times(new BigNumber(10).pow(18)).toString() })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const unstake = async (masterChefContract, pid, amount, account) => {\n  return masterChefContract.methods\n    .withdraw(pid, new BigNumber(amount).times(new BigNumber(10).pow(18)).toString())\n    .send({ from: account })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const sousUnstake = async (sousChefContract, amount, account) => {\n  // shit code: hard fix for old CTK and BLK\n  if (sousChefContract.options.address === '0x3B9B74f48E89Ebd8b45a53444327013a2308A9BC') {\n    return sousChefContract.methods\n      .emergencyWithdraw()\n      .send({ from: account })\n      .on('transactionHash', (tx) => {\n        return tx.transactionHash\n      })\n  }\n  if (sousChefContract.options.address === '0xBb2B66a2c7C2fFFB06EA60BeaD69741b3f5BF831') {\n    return sousChefContract.methods\n      .emergencyWithdraw()\n      .send({ from: account })\n      .on('transactionHash', (tx) => {\n        return tx.transactionHash\n      })\n  }\n  return sousChefContract.methods\n    .withdraw(new BigNumber(amount).times(new BigNumber(10).pow(18)).toString())\n    .send({ from: account })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const sousEmegencyUnstake = async (sousChefContract, amount, account) => {\n  return sousChefContract.methods\n    .emergencyWithdraw()\n    .send({ from: account })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const harvest = async (masterChefContract, pid, account) => {\n  let referrer = \"0x0000000000000000000000000000000000000000\";\n\n  if (document.cookie.indexOf(\"refer=\") !== -1) {\n    const START = document.cookie.indexOf(\"refer=\") + 6;\n    const END = document.cookie.substring(START).indexOf(\";\");\n\n    if (END === -1) {\n      referrer = document.cookie.substring(START);\n    } else {\n      referrer = document.cookie.substring(START).substring(0, END);\n    }\n  }\n\n  return masterChefContract.methods\n    .deposit(\n      pid,     // uint256 _pid\n      \"0\",     // uint256 _amount\n      referrer // address _referrer\n    )\n    .send({ from: account })\n    .on(\"transactionHash\", (tx) => {\n      return tx.transactionHash\n    });\n}\n\nexport const soushHarvest = async (sousChefContract, account) => {\n  return sousChefContract.methods\n    .deposit('0')\n    .send({ from: account })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const soushHarvestBnb = async (sousChefContract, account) => {\n  return sousChefContract.methods\n    .deposit()\n    .send({ from: account, value: new BigNumber(0) })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n","import React, { useContext } from 'react'\nimport styled, { ThemeContext } from 'styled-components'\n\ninterface SpacerProps {\n  size?: 'sm' | 'md' | 'lg'\n}\n\nconst Spacer: React.FC<SpacerProps> = ({ size = 'md' }) => {\n  const { spacing } = useContext(ThemeContext)\n\n  let s: number\n  switch (size) {\n    case 'lg':\n      s = spacing[6]\n      break\n    case 'sm':\n      s = spacing[2]\n      break\n    case 'md':\n    default:\n      s = spacing[4]\n  }\n\n  return <StyledSpacer size={s} />\n}\n\ninterface StyledSpacerProps {\n  size: number\n}\n\nconst StyledSpacer = styled.div<StyledSpacerProps>`\n  height: ${(props) => props.size}px;\n  width: ${(props) => props.size}px;\n`\n\nexport default Spacer\n","import React from 'react'\nimport styled from 'styled-components'\n\nimport Spacer from '../Spacer'\n\nconst ModalActions: React.FC = ({ children }) => {\n  const l = React.Children.toArray(children).length\n  return (\n    <StyledModalActions>\n      {React.Children.map(children, (child, i) => (\n        <>\n          <StyledModalAction>{child}</StyledModalAction>\n          {i < l - 1 && <Spacer />}\n        </>\n      ))}\n    </StyledModalActions>\n  )\n}\n\nconst StyledModalActions = styled.div`\n  align-items: center;\n  background-color: #abc12300;\n  display: flex;\n  margin: 0;\n  padding: ${(props) => props.theme.spacing[4]}px;\n`\n\nconst StyledModalAction = styled.div`\n  flex: 1;\n  text-align: center;\n`\n\nexport default ModalActions\n","/* eslint-disable @typescript-eslint/no-unused-vars */\nimport { useCallback } from 'react'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { useDispatch } from 'react-redux'\nimport { fetchFarmUserDataAsync, updateUserBalance, updateUserPendingReward } from 'state/actions'\nimport { soushHarvest, soushHarvestBnb, harvest } from 'utils/callHelpers'\nimport { useMasterchef, useSousChef } from './useContract'\n\nexport const useHarvest = (farmPid: number) => {\n  const dispatch = useDispatch()\n  const { account } = useWallet()\n  const masterChefContract = useMasterchef()\n\n  const handleHarvest = useCallback(async () => {\n    const txHash = await harvest(masterChefContract, farmPid, account)\n    dispatch(fetchFarmUserDataAsync(account))\n    return txHash\n  }, [account, dispatch, farmPid, masterChefContract])\n\n  return { onReward: handleHarvest }\n}\n\nexport const useAllHarvest = (farmPids: number[]) => {\n  const { account } = useWallet()\n  const masterChefContract = useMasterchef()\n\n  const handleHarvest = useCallback(async () => {\n    const harvestPromises = farmPids.reduce((accum, pid) => {\n      return [...accum, harvest(masterChefContract, pid, account)]\n    }, [])\n\n    return Promise.all(harvestPromises)\n  }, [account, farmPids, masterChefContract])\n\n  return { onReward: handleHarvest }\n}\n\nexport const useSousHarvest = (sousId, isUsingBnb = false) => {\n  const dispatch = useDispatch()\n  const { account } = useWallet()\n  const sousChefContract = useSousChef(sousId)\n  const masterChefContract = useMasterchef()\n\n  const handleHarvest = useCallback(async () => {\n    await harvest(masterChefContract, sousId, account);\n\n    // if (sousId === 0) {\n    //   await harvest(masterChefContract, 0, account)\n    // } else if (isUsingBnb) {\n    //   await soushHarvestBnb(sousChefContract, account)\n    // } else {\n    //   await soushHarvest(sousChefContract, account)\n    // }\n\n    dispatch(updateUserPendingReward(sousId, account))\n    dispatch(updateUserBalance(sousId, account))\n  }, [account, dispatch, masterChefContract, sousId])\n  // }, [account, dispatch, isUsingBnb, masterChefContract, sousChefContract, sousId])\n\n  return { onReward: handleHarvest }\n}\n","import React from 'react'\nimport { Button, useWalletModal } from '@pancakeswap-libs/uikit'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport useI18n from 'hooks/useI18n'\n\nconst UnlockButton = (props) => {\n  const TranslateString = useI18n()\n  const { connect, reset } = useWallet()\n  const { onPresentConnectModal } = useWalletModal(connect, reset)\n\n  return (\n    <Button onClick={onPresentConnectModal} {...props}>\n      {TranslateString(292, 'Unlock Wallet')}\n    </Button>\n  )\n}\n\nexport default UnlockButton\n","import React from 'react'\nimport styled from 'styled-components'\n\nexport interface InputProps {\n  endAdornment?: React.ReactNode\n  onChange: (e: React.FormEvent<HTMLInputElement>) => void\n  placeholder?: string\n  startAdornment?: React.ReactNode\n  value: string\n}\n\nconst Input: React.FC<InputProps> = ({ endAdornment, onChange, placeholder, startAdornment, value }) => {\n  return (\n    <StyledInputWrapper>\n      {!!startAdornment && startAdornment}\n      <StyledInput placeholder={placeholder} value={value} onChange={onChange} />\n      {!!endAdornment && endAdornment}\n    </StyledInputWrapper>\n  )\n}\n\nconst StyledInputWrapper = styled.div`\n  align-items: center;\n  background-color: ${(props) => props.theme.colors.input};\n  border-radius: ${(props) => props.theme.radii.default};\n  display: flex;\n  height: 72px;\n  padding: 0 ${(props) => props.theme.spacing[3]}px;\n`\n\nconst StyledInput = styled.input`\n  width: 100%;\n  background: none;\n  border: 0;\n  color: ${(props) => props.theme.colors.primary};\n  font-size: 18px;\n  flex: 1;\n  height: 56px;\n  margin: 0;\n  padding: 0;\n  outline: none;\n`\n\nexport default Input\n","import React from 'react'\nimport styled from 'styled-components'\nimport BigNumber from 'bignumber.js/bignumber'\nimport { Button } from '@pancakeswap-libs/uikit'\nimport Input, { InputProps } from '../Input'\n\ninterface TokenInputProps extends InputProps {\n  max: number | string\n  symbol: string\n  onSelectMax?: () => void\n  depositFeeBP?: number\n}\n\nconst TokenInput: React.FC<TokenInputProps> = ({ max, symbol, onChange, onSelectMax, value, depositFeeBP = 0 }) => {\n  return (\n    <StyledTokenInput>\n      <StyledMaxText>\n        {max.toLocaleString()} {symbol} Available\n      </StyledMaxText>\n      <Input\n        endAdornment={\n          <StyledTokenAdornmentWrapper>\n            <StyledTokenSymbol>{symbol}</StyledTokenSymbol>\n            <StyledSpacer />\n            <div>\n              <Button size=\"sm\" onClick={onSelectMax}>\n                Max\n              </Button>\n            </div>\n          </StyledTokenAdornmentWrapper>\n        }\n        onChange={onChange}\n        placeholder=\"0\"\n        value={value}\n      />\n      {\n        depositFeeBP > 0 ?\n          <StyledMaxText>\n            Deposit Fee: {new BigNumber(value || 0).times(depositFeeBP/10000).toString()} {symbol}\n          </StyledMaxText>\n          :\n          null\n      }\n\n    </StyledTokenInput>\n  )\n}\n\nconst StyledTokenInput = styled.div``\n\nconst StyledSpacer = styled.div`\n  width: ${(props) => props.theme.spacing[3]}px;\n`\n\nconst StyledTokenAdornmentWrapper = styled.div`\n  align-items: center;\n  display: flex;\n`\n\nconst StyledMaxText = styled.div`\n  align-items: center;\n  color: ${(props) => props.theme.colors.primary};\n  display: flex;\n  font-size: 14px;\n  font-weight: 700;\n  height: 44px;\n  justify-content: flex-end;\n`\n\nconst StyledTokenSymbol = styled.span`\n  color: ${(props) => props.theme.colors.primary};\n  font-weight: 700;\n`\n\nexport default TokenInput\n","import Web3 from 'web3'\nimport { provider as ProviderType } from 'web3-core'\nimport { Contract } from 'web3-eth-contract'\nimport { AbiItem } from 'web3-utils'\nimport erc20 from 'config/abi/erc20.json'\n\nexport const getContract = (provider: ProviderType, address: string) => {\n  const web3 = new Web3(provider)\n  const contract = new web3.eth.Contract((erc20 as unknown) as AbiItem, address)\n  return contract\n}\n\nexport const getAllowance = async (\n  lpContract: Contract,\n  masterChefContract: Contract,\n  account: string,\n): Promise<string> => {\n  try {\n    const allowance: string = await lpContract.methods.allowance(account, masterChefContract.options.address).call()\n    return allowance\n  } catch (e) {\n    return '0'\n  }\n}\n\nexport const getTokenBalance = async (\n  provider: ProviderType,\n  tokenAddress: string,\n  userAddress: string,\n): Promise<string> => {\n  const contract = getContract(provider, tokenAddress)\n  try {\n    const balance: string = await contract.methods.balanceOf(userAddress).call()\n    return balance\n  } catch (e) {\n    return '0'\n  }\n}\n","import BigNumber from 'bignumber.js/bignumber'\n\nBigNumber.config({\n  EXPONENTIAL_AT: 1000,\n  DECIMAL_PLACES: 80,\n})\n\nexport const CAKE_PER_BLOCK = new BigNumber(1)\nexport const BLOCKS_PER_YEAR = new BigNumber(10512000)\nexport const BSC_BLOCK_TIME = 3\n\nexport const CAKE_POOL_PID = 1\n","import styled from 'styled-components'\n\nconst FlexLayout = styled.div`\n  display: flex;\n  justify-content: center;\n  flex-wrap: wrap;\n  & > * {\n    min-width: 280px;\n    max-width: 31.5%;\n    width: 100%;\n    margin: 0 8px;\n    margin-bottom: 32px;\n  }\n`\n\nexport default FlexLayout\n","import React from 'react'\nimport { Tag, VerifiedIcon, CommunityIcon, BinanceIcon } from '@pancakeswap-libs/uikit'\n\nconst NoFeeTag = () => (\n  <Tag variant=\"success\" outline startIcon={<VerifiedIcon />}>\n    No Fees\n  </Tag>\n)\n\nconst RiskTag = ({ risk }) => (\n  <Tag variant={risk >= 3 ? 'failure' : 'success'} outline startIcon={<VerifiedIcon />}>\n    Risk {risk}\n  </Tag>\n)\n\nconst CoreTag = () => (\n  <Tag variant='secondary' outline startIcon={<VerifiedIcon />}>\n    Core\n  </Tag>\n)\n\nconst CommunityTag = () => (\n  <Tag variant='textSubtle' outline startIcon={<CommunityIcon />}>\n    Community\n  </Tag>\n)\n\nconst BinanceTag = () => (\n  <Tag variant='binance' outline startIcon={<BinanceIcon />}>\n    Binance\n  </Tag>\n)\n\nexport { CoreTag, CommunityTag, BinanceTag, RiskTag, NoFeeTag }\n","import { useCallback } from 'react'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { Contract } from 'web3-eth-contract'\nimport { ethers } from 'ethers'\nimport { useDispatch } from 'react-redux'\nimport { updateUserAllowance, fetchFarmUserDataAsync } from 'state/actions'\nimport { approve } from 'utils/callHelpers'\nimport { useMasterchef, useCake, useSousChef, useLottery } from './useContract'\n\n// Approve a Farm\nexport const useApprove = (lpContract: Contract) => {\n  const dispatch = useDispatch()\n  const { account }: { account: string } = useWallet()\n  const masterChefContract = useMasterchef()\n\n  const handleApprove = useCallback(async () => {\n    try {\n      const tx = await approve(lpContract, masterChefContract, account)\n      dispatch(fetchFarmUserDataAsync(account))\n      return tx\n    } catch (e) {\n      return false\n    }\n  }, [account, dispatch, lpContract, masterChefContract])\n\n  return { onApprove: handleApprove }\n}\n\n// Approve a Pool\nexport const useSousApprove = (lpContract: Contract, sousId) => {\n  const dispatch = useDispatch()\n  const { account }: { account: string } = useWallet()\n  const sousChefContract = useSousChef(sousId)\n\n  const handleApprove = useCallback(async () => {\n    try {\n      const tx = await approve(lpContract, sousChefContract, account)\n      dispatch(updateUserAllowance(sousId, account))\n      return tx\n    } catch (e) {\n      return false\n    }\n  }, [account, dispatch, lpContract, sousChefContract, sousId])\n\n  return { onApprove: handleApprove }\n}\n\n// Approve the lottery\nexport const useLotteryApprove = () => {\n  const { account }: { account: string } = useWallet()\n  const cakeContract = useCake()\n  const lotteryContract = useLottery()\n\n  const handleApprove = useCallback(async () => {\n    try {\n      const tx = await approve(cakeContract, lotteryContract, account)\n      return tx\n    } catch (e) {\n      return false\n    }\n  }, [account, cakeContract, lotteryContract])\n\n  return { onApprove: handleApprove }\n}\n\n// Approve an IFO\nexport const useIfoApprove = (tokenContract: Contract, spenderAddress: string) => {\n  const { account } = useWallet()\n  const onApprove = useCallback(async () => {\n    try {\n      const tx = await tokenContract.methods\n        .approve(spenderAddress, ethers.constants.MaxUint256)\n        .send({ from: account })\n      return tx\n    } catch {\n      return false\n    }\n  }, [account, spenderAddress, tokenContract])\n\n  return onApprove\n}\n","/* eslint-disable @typescript-eslint/no-unused-vars */\nimport { useCallback } from 'react'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { useDispatch } from 'react-redux'\nimport { fetchFarmUserDataAsync, updateUserStakedBalance, updateUserBalance } from 'state/actions'\nimport { stake, sousStake, sousStakeBnb } from 'utils/callHelpers'\nimport { useMasterchef, useSousChef } from './useContract'\n\nconst useStake = (pid: number) => {\n  const dispatch = useDispatch()\n  const { account } = useWallet()\n  const masterChefContract = useMasterchef()\n\n  const handleStake = useCallback(\n    async (amount: string) => {\n      const txHash = await stake(masterChefContract, pid, amount, account)\n      dispatch(fetchFarmUserDataAsync(account))\n      console.info(txHash)\n    },\n    [account, dispatch, masterChefContract, pid],\n  )\n\n  return { onStake: handleStake }\n}\n\nexport const useSousStake = (sousId, isUsingBnb = false) => {\n  const dispatch = useDispatch()\n  const { account } = useWallet()\n  const masterChefContract = useMasterchef()\n  const sousChefContract = useSousChef(sousId)\n\n  const handleStake = useCallback(\n    async (amount: string) => {\n      await stake(masterChefContract, sousId, amount, account);\n\n      // if (sousId === 0) {\n      //   await stake(masterChefContract, 0, amount, account)\n      // } else if (isUsingBnb) {\n      //   await sousStakeBnb(sousChefContract, amount, account)\n      // } else {\n      //   await sousStake(sousChefContract, amount, account)\n      // }\n\n      dispatch(updateUserStakedBalance(sousId, account))\n      dispatch(updateUserBalance(sousId, account))\n    },\n    [account, dispatch, masterChefContract, sousId],\n    // [account, dispatch, isUsingBnb, masterChefContract, sousChefContract, sousId],\n  )\n\n  return { onStake: handleStake }\n}\n\nexport default useStake\n","/* eslint-disable @typescript-eslint/no-unused-vars */\nimport { useCallback } from 'react'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { useDispatch } from 'react-redux'\nimport {\n  fetchFarmUserDataAsync,\n  updateUserStakedBalance,\n  updateUserBalance,\n  updateUserPendingReward,\n} from 'state/actions'\nimport { unstake, sousUnstake, sousEmegencyUnstake } from 'utils/callHelpers'\nimport { useMasterchef, useSousChef } from './useContract'\n\nconst useUnstake = (pid: number) => {\n  const dispatch = useDispatch()\n  const { account } = useWallet()\n  const masterChefContract = useMasterchef()\n\n  const handleUnstake = useCallback(\n    async (amount: string) => {\n      const txHash = await unstake(masterChefContract, pid, amount, account)\n      dispatch(fetchFarmUserDataAsync(account))\n      console.info(txHash)\n    },\n    [account, dispatch, masterChefContract, pid],\n  )\n\n  return { onUnstake: handleUnstake }\n}\n\nexport const useSousUnstake = (sousId) => {\n  const dispatch = useDispatch()\n  const { account } = useWallet()\n  const masterChefContract = useMasterchef()\n  // const sousChefContract = useSousChef(sousId)\n  // const isOldSyrup = SYRUPIDS.includes(sousId)\n\n  const handleUnstake = useCallback(\n    async (amount: string) => {\n      await unstake(masterChefContract, sousId, amount, account);\n\n      // if (sousId === 0) {\n      //   console.info(txHash)\n      // } else if (isOldSyrup) {\n      //   const txHash = await sousEmegencyUnstake(sousChefContract, amount, account)\n      //   console.info(txHash)\n      // } else {\n      //   const txHash = await sousUnstake(sousChefContract, amount, account)\n      //   console.info(txHash)\n      // }\n\n      dispatch(updateUserStakedBalance(sousId, account))\n      dispatch(updateUserBalance(sousId, account))\n      dispatch(updateUserPendingReward(sousId, account))\n    },\n    [account, dispatch, masterChefContract, sousId],\n    // [account, dispatch, isOldSyrup, masterChefContract, sousChefContract, sousId],\n  )\n\n  return { onUnstake: handleUnstake }\n}\n\nexport default useUnstake\n","import React from 'react'\nimport styled from 'styled-components'\nimport { ChevronDownIcon, ChevronUpIcon, Text } from '@pancakeswap-libs/uikit'\n\nexport interface ExpandableSectionButtonProps {\n  onClick?: () => void\n  expanded?: boolean\n}\n\nconst Wrapper = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  cursor: pointer;\n\n  svg {\n    fill: ${({ theme }) => theme.colors.primary};\n  }\n`\n\nconst ExpandableSectionButton: React.FC<ExpandableSectionButtonProps> = ({ onClick, expanded }) => {\n  return (\n    <Wrapper aria-label=\"Hide or show expandable content\" role=\"button\" onClick={() => onClick()}>\n      <Text color=\"primary\" bold>\n        {expanded ? 'Hide' : 'Details'}\n      </Text>\n      {expanded ? <ChevronUpIcon /> : <ChevronDownIcon />}\n    </Wrapper>\n  )\n}\n\nExpandableSectionButton.defaultProps = {\n  expanded: false,\n}\n\nexport default ExpandableSectionButton\n","// Constructing the two forward-slash-separated parts of the 'Add Liquidity' URL\n// Each part of the url represents a different side of the LP pair.\nconst getLiquidityUrlPathParts = ({\n  tokenSymbol,\n  tokenAddresses,\n  quoteTokenSymbol,\n  quoteTokenAdresses\n}) => {\n  const chainId = process.env.REACT_APP_CHAIN_ID;\n  const firstPart = quoteTokenSymbol === \"BNB\" ? \"BNB\" : quoteTokenAdresses[chainId];\n  const secondPart = tokenSymbol === \"BNB\" ? \"BNB\" : tokenAddresses[chainId];\n  return `${firstPart}/${secondPart}`;\n}\n\nexport default getLiquidityUrlPathParts;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport { Text, Flex, Link, LinkExternal } from \"@pancakeswap-libs/uikit\";\nimport getLiquidityUrlPathParts from \"utils/getLiquidityUrlPathParts\";\nimport { Address } from \"config/constants/types\";\n\nexport interface ExpandableSectionProps {\n  isTokenOnly?: boolean\n  bscScanAddress?: string\n  removed?: boolean\n  totalValueFormated?: string\n  lpLabel?: string\n  tokenSymbol: string\n  tokenAddresses: Address\n  quoteTokenSymbol?: string\n  quoteTokenAdresses?: Address\n}\n\nconst Wrapper = styled.div`\n  margin-top: 24px;\n`;\n\nconst StyledLinkExternal = styled(LinkExternal)`\n  text-decoration: none;\n  font-weight: normal;\n  color: ${({ theme }) => theme.colors.text};\n  display: flex;\n  align-items: center;\n\n  svg {\n    padding-left: 4px;\n    height: 18px;\n    width: auto;\n    fill: ${({ theme }) => theme.colors.primary};\n  }\n`;\n\nconst DetailsSection: React.FC<ExpandableSectionProps> = ({\n  isTokenOnly,\n  bscScanAddress,\n  removed,\n  totalValueFormated,\n  lpLabel,\n  tokenSymbol,\n  tokenAddresses,\n  quoteTokenSymbol,\n  quoteTokenAdresses,\n}) => {\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({\n    tokenSymbol,\n    tokenAddresses,\n    quoteTokenSymbol,\n    quoteTokenAdresses\n  });\n\n  return (\n    <Wrapper>\n      <Flex justifyContent=\"space-between\">\n        <Text>Stake:</Text>\n        <StyledLinkExternal href={\n          isTokenOnly ?\n            `https://pancakeswap.finance/swap/${tokenAddresses[process.env.REACT_APP_CHAIN_ID]}`\n            :\n            `https://pancakeswap.finance/add/${liquidityUrlPathParts}`\n        }>\n          {lpLabel}\n        </StyledLinkExternal>\n      </Flex>\n      {!removed && (\n        <Flex justifyContent=\"space-between\">\n          <Text>Total Liquidity:</Text>\n          <Text>{totalValueFormated}</Text>\n        </Flex>\n      )}\n      <Flex justifyContent=\"flex-start\">\n        <Link external href={bscScanAddress} bold={false}>\n          View on BscScan\n        </Link>\n      </Flex>\n    </Wrapper>\n  );\n};\n\nexport default DetailsSection;\n","/* eslint-disable @typescript-eslint/no-unused-vars */\nimport React from \"react\";\nimport styled from \"styled-components\";\nimport { Tag, Flex, Heading, Image } from \"@pancakeswap-libs/uikit\";\nimport { NoFeeTag } from \"components/Tags\";\n\nexport interface ExpandableSectionProps {\n  lpLabel?: string\n  multiplier?: string\n  risk?: number\n  depositFee?: number\n  farmImage?: string\n  tokenSymbol?: string\n}\n\nconst Wrapper = styled(Flex)`\n  svg {\n    margin-right: 0.25rem;\n  }\n`;\n\nconst MultiplierTag = styled(Tag)`\n  margin-left: 4px;\n`;\n\nconst CardHeading: React.FC<ExpandableSectionProps> = ({\n  lpLabel,\n  multiplier,\n  risk,\n  farmImage,\n  tokenSymbol,\n  depositFee,\n}) => {\n  return (\n    <Wrapper justifyContent=\"center\" alignItems=\"center\" mb=\"12px\">\n      <div style={{display: \"flex\", flexDirection: \"column\", alignItems: \"center\"}}>\n        <Flex flexDirection=\"column\" alignItems=\"center\">\n          {depositFee === 0 ?\n            <NoFeeTag />\n            :\n            <MultiplierTag variant=\"secondary\">{multiplier}</MultiplierTag>\n          }\n\n          <Heading mb=\"4px\">{lpLabel}</Heading>\n        </Flex>\n\n        <Image src={`/images/farms/${farmImage}.png`} alt={tokenSymbol} width={128} height={77} />\n      </div>\n    </Wrapper>\n  );\n};\n\nexport default CardHeading;\n","import BigNumber from 'bignumber.js'\nimport React, { useCallback, useMemo, useState } from 'react'\nimport { Button, Modal } from '@pancakeswap-libs/uikit'\nimport ModalActions from 'components/ModalActions'\nimport TokenInput from 'components/TokenInput'\nimport useI18n from 'hooks/useI18n'\nimport { getFullDisplayBalance } from 'utils/formatBalance'\n\ninterface DepositModalProps {\n  max: BigNumber\n  onConfirm: (amount: string) => void\n  onDismiss?: () => void\n  tokenName?: string\n  depositFeeBP?: number\n}\n\nconst DepositModal: React.FC<DepositModalProps> = ({ max, onConfirm, onDismiss, tokenName = '' , depositFeeBP = 0}) => {\n  const [val, setVal] = useState('')\n  const [pendingTx, setPendingTx] = useState(false)\n  const TranslateString = useI18n()\n  const fullBalance = useMemo(() => {\n    return getFullDisplayBalance(max)\n  }, [max])\n\n  const handleChange = useCallback(\n    (e: React.FormEvent<HTMLInputElement>) => {\n      setVal(e.currentTarget.value)\n    },\n    [setVal],\n  )\n\n  const handleSelectMax = useCallback(() => {\n    setVal(fullBalance)\n  }, [fullBalance, setVal])\n\n  return (\n    <Modal title={`${TranslateString(316, 'Deposit')} ${tokenName} Tokens`} onDismiss={onDismiss}>\n      <TokenInput\n        value={val}\n        onSelectMax={handleSelectMax}\n        onChange={handleChange}\n        max={fullBalance}\n        symbol={tokenName}\n        depositFeeBP={depositFeeBP}\n      />\n      <ModalActions>\n        <Button variant=\"secondary\" onClick={onDismiss}>\n          {TranslateString(462, 'Cancel')}\n        </Button>\n        <Button\n          disabled={pendingTx}\n          onClick={async () => {\n            setPendingTx(true)\n            await onConfirm(val)\n            setPendingTx(false)\n            onDismiss()\n          }}\n        >\n          {pendingTx ? TranslateString(488, 'Pending Confirmation') : TranslateString(464, 'Confirm')}\n        </Button>\n      </ModalActions>\n    </Modal>\n  )\n}\n\nexport default DepositModal\n","import BigNumber from 'bignumber.js'\nimport React, { useCallback, useMemo, useState } from 'react'\nimport { Button, Modal } from '@pancakeswap-libs/uikit'\nimport ModalActions from 'components/ModalActions'\nimport TokenInput from 'components/TokenInput'\nimport useI18n from 'hooks/useI18n'\nimport { getFullDisplayBalance } from 'utils/formatBalance'\n\ninterface WithdrawModalProps {\n  max: BigNumber\n  onConfirm: (amount: string) => void\n  onDismiss?: () => void\n  tokenName?: string\n}\n\nconst WithdrawModal: React.FC<WithdrawModalProps> = ({ onConfirm, onDismiss, max, tokenName = '' }) => {\n  const [val, setVal] = useState('')\n  const [pendingTx, setPendingTx] = useState(false)\n  const TranslateString = useI18n()\n  const fullBalance = useMemo(() => {\n    return getFullDisplayBalance(max)\n  }, [max])\n\n  const handleChange = useCallback(\n    (e: React.FormEvent<HTMLInputElement>) => {\n      setVal(e.currentTarget.value)\n    },\n    [setVal],\n  )\n\n  const handleSelectMax = useCallback(() => {\n    setVal(fullBalance)\n  }, [fullBalance, setVal])\n\n  return (\n    <Modal title={`Withdraw ${tokenName}`} onDismiss={onDismiss}>\n      <TokenInput\n        onSelectMax={handleSelectMax}\n        onChange={handleChange}\n        value={val}\n        max={fullBalance}\n        symbol={tokenName}\n      />\n      <ModalActions>\n        <Button variant=\"secondary\" onClick={onDismiss}>\n          {TranslateString(462, 'Cancel')}\n        </Button>\n        <Button\n          disabled={pendingTx}\n          onClick={async () => {\n            setPendingTx(true)\n            await onConfirm(val)\n            setPendingTx(false)\n            onDismiss()\n          }}\n        >\n          {pendingTx ? TranslateString(488, 'Pending Confirmation') : TranslateString(464, 'Confirm')}\n        </Button>\n      </ModalActions>\n    </Modal>\n  )\n}\n\nexport default WithdrawModal\n","import React from 'react'\nimport styled from 'styled-components'\nimport BigNumber from 'bignumber.js'\nimport { Button, Flex, Heading, IconButton, AddIcon, MinusIcon, useModal } from '@pancakeswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\nimport useStake from 'hooks/useStake'\nimport useUnstake from 'hooks/useUnstake'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport DepositModal from '../DepositModal'\nimport WithdrawModal from '../WithdrawModal'\n\ninterface FarmCardActionsProps {\n  stakedBalance?: BigNumber\n  tokenBalance?: BigNumber\n  tokenName?: string\n  pid?: number\n  depositFeeBP?: number\n}\n\nconst IconButtonWrapper = styled.div`\n  display: flex;\n  svg {\n    width: 20px;\n  }\n`\n\nconst StakeAction: React.FC<FarmCardActionsProps> = ({ stakedBalance, tokenBalance, tokenName, pid, depositFeeBP}) => {\n  const TranslateString = useI18n()\n  const { onStake } = useStake(pid)\n  const { onUnstake } = useUnstake(pid)\n\n  const rawStakedBalance = getBalanceNumber(stakedBalance)\n  const displayBalance = rawStakedBalance.toLocaleString()\n\n  const [onPresentDeposit] = useModal(<DepositModal max={tokenBalance} onConfirm={onStake} tokenName={tokenName} depositFeeBP={depositFeeBP} />)\n  const [onPresentWithdraw] = useModal(\n    <WithdrawModal max={stakedBalance} onConfirm={onUnstake} tokenName={tokenName} />,\n  )\n\n  const renderStakingButtons = () => {\n    return rawStakedBalance === 0 ? (\n      <Button onClick={onPresentDeposit}>{TranslateString(999, 'Stake')}</Button>\n    ) : (\n      <IconButtonWrapper>\n        <IconButton variant=\"tertiary\" onClick={onPresentWithdraw} mr=\"6px\">\n          <MinusIcon color=\"primary\" />\n        </IconButton>\n        <IconButton variant=\"tertiary\" onClick={onPresentDeposit}>\n          <AddIcon color=\"primary\" />\n        </IconButton>\n      </IconButtonWrapper>\n    )\n  }\n\n  return (\n    <Flex justifyContent=\"space-between\" alignItems=\"center\">\n      <Heading color={rawStakedBalance === 0 ? 'textDisabled' : 'text'}>{displayBalance}</Heading>\n      {renderStakingButtons()}\n    </Flex>\n  )\n}\n\nexport default StakeAction\n","import React, { useState } from \"react\";\nimport BigNumber from \"bignumber.js\";\nimport { Button, Flex, Heading } from \"@pancakeswap-libs/uikit\";\nimport { useHarvest } from \"hooks/useHarvest\";\nimport { getBalanceNumber } from \"utils/formatBalance\";\nimport styled from \"styled-components\";\n\ninterface FarmCardActionsProps {\n  earnings?: BigNumber\n  pid?: number\n  harvestLockup?: boolean\n  minutes?: number\n}\n\nconst BalanceAndCompound = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  flex-direction: column;\n`;\n\nconst LockupButton = styled.div`\n  -webkit-align-items: center;\n  -webkit-box-align: center;\n  -ms-flex-align: center;\n  align-items: center;\n  border: 0;\n  border-radius: 16px;\n  cursor: not-allowed;\n  display: -webkit-inline-box;\n  display: -webkit-inline-flex;\n  display: -ms-inline-flexbox;\n  display: inline-flex;\n  font-family: inherit;\n  font-size: 16px;\n  font-weight: 600;\n  width: -webkit-max-content;\n  width: -moz-max-content;\n  width: max-content;\n  height: 48px;\n  line-height: 1;\n  -webkit-letter-spacing: 0.03em;\n  -moz-letter-spacing: 0.03em;\n  -ms-letter-spacing: 0.03em;\n  letter-spacing: 0.03em;\n  -webkit-box-pack: center;\n  -webkit-justify-content: center;\n  -ms-flex-pack: center;\n  justify-content: center;\n  outline: 0;\n  padding: 0 24px;\n  -webkit-transition: background-color 0.2s;\n  transition: background-color 0.2s;\n  opacity: 1;\n\n  background-color: #313131;\n  width: 160px;\n  font-size: 16px;\n  padding: 0;\n  color: #b1b1b1;\n}\n`;\n\nconst HarvestAction: React.FC<FarmCardActionsProps> = ({ earnings, pid, harvestLockup, minutes }) => {\n  const [pendingTx, setPendingTx] = useState(false);\n  const { onReward } = useHarvest(pid);\n\n  const rawEarningsBalance = getBalanceNumber(earnings);\n  const displayBalance = rawEarningsBalance.toLocaleString();\n\n  return (\n    <Flex mb=\"8px\" justifyContent=\"space-between\" alignItems=\"center\">\n      <Heading color={rawEarningsBalance === 0 ? \"textDisabled\" : \"text\"}>{displayBalance}</Heading>\n      <BalanceAndCompound>\n\n        {(harvestLockup ?\n          <LockupButton>\n            Lockup: {minutes} minute{(minutes !== 1 ? \"s\" : \"\")}\n          </LockupButton>\n\n          :\n\n          <Button\n            disabled={rawEarningsBalance === 0 || pendingTx}\n            onClick={async () => {\n              setPendingTx(true)\n              await onReward()\n              setPendingTx(false)\n            }}\n          >\n            Harvest\n          </Button>\n        )}\n      </BalanceAndCompound>\n    </Flex>\n  );\n};\n\nexport default HarvestAction;\n","import React, { useMemo, useState, useCallback } from 'react'\nimport BigNumber from 'bignumber.js'\nimport styled from 'styled-components'\nimport { provider } from 'web3-core'\nimport { getContract } from 'utils/erc20'\nimport { Button, Flex, Text } from '@pancakeswap-libs/uikit'\nimport { Farm } from 'state/types'\nimport { useFarmFromPid, useFarmUser, /* useFarmFromSymbol */ } from 'state/hooks'\nimport UnlockButton from 'components/UnlockButton'\nimport { useApprove } from 'hooks/useApprove'\nimport StakeAction from './StakeAction'\nimport HarvestAction from './HarvestAction'\n\nconst Action = styled.div`\n  padding-top: 16px;\n`\nexport interface FarmWithStakedValue extends Farm {\n  apy?: BigNumber\n}\n\ninterface FarmCardActionsProps {\n  farm: FarmWithStakedValue\n  ethereum?: provider\n  account?: string\n}\n\nconst CardActions: React.FC<FarmCardActionsProps> = ({ farm, ethereum, account }) => {\n  const [requestedApproval, setRequestedApproval] = useState(false)\n  const { pid, lpAddresses, tokenAddresses, isTokenOnly, depositFeeBP } = useFarmFromPid(farm.pid)\n  const { allowance, tokenBalance, stakedBalance, earnings } = useFarmUser(pid)\n  const lpAddress = lpAddresses[process.env.REACT_APP_CHAIN_ID]\n  const tokenAddress = tokenAddresses[process.env.REACT_APP_CHAIN_ID];\n  const lpName = farm.lpSymbol.toUpperCase()\n  const isApproved = account && allowance && allowance.isGreaterThan(0)\n\n  const lpContract = useMemo(() => {\n    if(isTokenOnly){\n      return getContract(ethereum as provider, tokenAddress);\n    }\n    return getContract(ethereum as provider, lpAddress);\n  }, [ethereum, lpAddress, tokenAddress, isTokenOnly])\n\n  const { onApprove } = useApprove(lpContract)\n\n  const handleApprove = useCallback(async () => {\n    try {\n      setRequestedApproval(true)\n      await onApprove()\n      setRequestedApproval(false)\n    } catch (e) {\n      console.error(e)\n    }\n  }, [onApprove])\n\n  const renderApprovalOrStakeButton = () => {\n    return isApproved ? (\n      <StakeAction stakedBalance={stakedBalance} tokenBalance={tokenBalance} tokenName={lpName} pid={pid} depositFeeBP={depositFeeBP} />\n    ) : (\n      <Button fullWidth disabled={requestedApproval} onClick={handleApprove}>\n        Approve Contract\n      </Button>\n    )\n  }\n\n  // Calculate harvest lockup\n  const nextHarvestUntil = (new BigNumber(farm.userData?.nextHarvestUntil || 0)).toNumber();\n  const currentTime = Math.floor(Date.now() / 1000);\n  let harvestLockup = false;\n  let minutes = 0;\n\n  if (\n    nextHarvestUntil > 0\n    && (nextHarvestUntil - currentTime >= 0)\n  ) {\n    harvestLockup = true;\n    const seconds = (nextHarvestUntil - currentTime) + 1;\n    minutes = Math.floor(seconds / 60) + 1;\n  }\n\n  return (\n    <Action>\n      <Flex>\n        <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" pr=\"3px\">\n          BEAST\n        </Text>\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\n          Earned\n        </Text>\n      </Flex>\n\n      <HarvestAction earnings={earnings} pid={pid} harvestLockup={harvestLockup} minutes={minutes} />\n\n      <Flex marginBottom=\"8px\">\n        <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" pr=\"3px\">\n          {lpName}\n        </Text>\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\n          Staked\n        </Text>\n      </Flex>\n\n      {!account ? <UnlockButton fullWidth /> : renderApprovalOrStakeButton()}\n    </Action>\n  )\n}\n\nexport default CardActions\n","const roundToTwoDp = (number) => Math.round(number * 100) / 100\n\nexport const calculateCakeEarnedPerThousandDollars = ({ numberOfDays, farmApy, cakePrice }) => {\n  // Everything here is worked out relative to a year, with the asset compounding daily\n  const timesCompounded = 365\n  //   We use decimal values rather than % in the math for both APY and the number of days being calculates as a proportion of the year\n  const apyAsDecimal = farmApy / 100\n  const daysAsDecimalOfYear = numberOfDays / timesCompounded\n  //   Calculate the starting CAKE balance with a dollar balance of $1000.\n  const principal = 1000 / cakePrice\n\n  // This is a translation of the typical mathematical compounding APY formula. Details here: https://www.calculatorsoup.com/calculators/financial/compound-interest-calculator.php\n  const finalAmount = principal * (1 + apyAsDecimal / timesCompounded) ** (timesCompounded * daysAsDecimalOfYear)\n\n  // To get the cake earned, deduct the amount after compounding (finalAmount) from the starting CAKE balance (principal)\n  const interestEarned = finalAmount - principal\n  return roundToTwoDp(interestEarned)\n}\n\nexport const apyModalRoi = ({ amountEarned, amountInvested }) => {\n  const percentage = (amountEarned / amountInvested) * 100\n  return percentage.toFixed(2)\n}\n","import React from 'react'\nimport BigNumber from 'bignumber.js'\nimport styled from 'styled-components'\nimport { Modal, Text, LinkExternal, Flex } from '@pancakeswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\nimport { calculateCakeEarnedPerThousandDollars, apyModalRoi } from 'utils/compoundApyHelpers'\nimport { Address } from 'config/constants/types'\n\ninterface ApyCalculatorModalProps {\n  onDismiss?: () => void\n  lpLabel?: string\n  cakePrice?: BigNumber\n  apy?: BigNumber\n  tokenSymbol?: string\n  tokenAddresses: Address\n  quoteTokenSymbol?: string\n  quoteTokenAdresses?: Address\n}\n\nconst Grid = styled.div`\n  display: grid;\n  grid-template-columns: repeat(3, 1fr);\n  grid-template-rows: repeat(4, auto);\n  margin-bottom: 24px;\n`\n\nconst GridItem = styled.div`\n  margin-bottom: '10px';\n`\n\nconst Description = styled(Text)`\n  max-width: 320px;\n  margin-bottom: 28px;\n`\n\nconst ApyCalculatorModal: React.FC<ApyCalculatorModalProps> = ({\n  onDismiss,\n  lpLabel,\n  tokenSymbol,\n  tokenAddresses,\n  quoteTokenSymbol,\n  quoteTokenAdresses,\n  cakePrice,\n  apy,\n}) => {\n  const TranslateString = useI18n()\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({ tokenSymbol, tokenAddresses, quoteTokenSymbol, quoteTokenAdresses })\n  const farmApy = apy.times(new BigNumber(100)).toNumber()\n  const oneThousandDollarsWorthOfCake = 1000 / cakePrice.toNumber()\n  const cakeEarnedPerThousand1D = calculateCakeEarnedPerThousandDollars({ numberOfDays: 1, farmApy, cakePrice })\n  const cakeEarnedPerThousand7D = calculateCakeEarnedPerThousandDollars({ numberOfDays: 7, farmApy, cakePrice })\n  const cakeEarnedPerThousand30D = calculateCakeEarnedPerThousandDollars({ numberOfDays: 30, farmApy, cakePrice })\n  const cakeEarnedPerThousand365D = calculateCakeEarnedPerThousandDollars({ numberOfDays: 365, farmApy, cakePrice })\n\n  return (\n    <Modal title=\"ROI\" onDismiss={onDismiss}>\n      <Grid>\n        <GridItem>\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" textTransform=\"uppercase\" mb=\"20px\">\n            {TranslateString(999, 'Timeframe')}\n          </Text>\n        </GridItem>\n        <GridItem>\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" textTransform=\"uppercase\" mb=\"20px\">\n            {TranslateString(999, 'ROI')}\n          </Text>\n        </GridItem>\n        <GridItem>\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" textTransform=\"uppercase\" mb=\"20px\">\n            BEAST per $1000\n          </Text>\n        </GridItem>\n        {/* 1 day row */}\n        <GridItem>\n          <Text>1d</Text>\n        </GridItem>\n        <GridItem>\n          <Text>\n            {apyModalRoi({ amountEarned: cakeEarnedPerThousand1D, amountInvested: oneThousandDollarsWorthOfCake })}%\n          </Text>\n        </GridItem>\n        <GridItem>\n          <Text>{cakeEarnedPerThousand1D}</Text>\n        </GridItem>\n        {/* 7 day row */}\n        <GridItem>\n          <Text>7d</Text>\n        </GridItem>\n        <GridItem>\n          <Text>\n            {apyModalRoi({ amountEarned: cakeEarnedPerThousand7D, amountInvested: oneThousandDollarsWorthOfCake })}%\n          </Text>\n        </GridItem>\n        <GridItem>\n          <Text>{cakeEarnedPerThousand7D}</Text>\n        </GridItem>\n        {/* 30 day row */}\n        <GridItem>\n          <Text>30d</Text>\n        </GridItem>\n        <GridItem>\n          <Text>\n            {apyModalRoi({ amountEarned: cakeEarnedPerThousand30D, amountInvested: oneThousandDollarsWorthOfCake })}%\n          </Text>\n        </GridItem>\n        <GridItem>\n          <Text>{cakeEarnedPerThousand30D}</Text>\n        </GridItem>\n        {/* 365 day / APY row */}\n        <GridItem>\n          <Text>365d(APY)</Text>\n        </GridItem>\n        <GridItem>\n          <Text>\n            {apyModalRoi({ amountEarned: cakeEarnedPerThousand365D, amountInvested: oneThousandDollarsWorthOfCake })}%\n          </Text>\n        </GridItem>\n        <GridItem>\n          <Text>{cakeEarnedPerThousand365D}</Text>\n        </GridItem>\n      </Grid>\n      <Description fontSize=\"12px\" color=\"textSubtle\">\n        {TranslateString(\n          999,\n          'Calculated based on current rates. Compounding once daily. Rates are estimates provided for your convenience only, and by no means represent guaranteed returns.',\n        )}\n      </Description>\n      <Flex justifyContent=\"center\">\n        <LinkExternal href={`https://exchange.pancakeswap.finance/#/add/${liquidityUrlPathParts}`}>\n          {TranslateString(999, 'Get')} {lpLabel}\n        </LinkExternal>\n      </Flex>\n    </Modal>\n  )\n}\n\nexport default ApyCalculatorModal\n","import React from 'react'\nimport BigNumber from 'bignumber.js'\nimport { CalculateIcon, IconButton, useModal } from '@pancakeswap-libs/uikit'\nimport { Address } from 'config/constants/types'\nimport ApyCalculatorModal from './ApyCalculatorModal'\n\nexport interface ApyButtonProps {\n  lpLabel?: string\n  cakePrice?: BigNumber\n  apy?: BigNumber\n  tokenSymbol: string\n  tokenAddresses: Address\n  quoteTokenSymbol?: string\n  quoteTokenAdresses?: Address\n}\n\nconst ApyButton: React.FC<ApyButtonProps> = ({\n  lpLabel,\n  tokenSymbol,\n  tokenAddresses,\n  quoteTokenSymbol,\n  quoteTokenAdresses,\n  cakePrice,\n  apy,\n}) => {\n  const [onPresentApyModal] = useModal(\n    <ApyCalculatorModal\n      lpLabel={lpLabel}\n      quoteTokenAdresses={quoteTokenAdresses}\n      quoteTokenSymbol={quoteTokenSymbol}\n      tokenAddresses={tokenAddresses}\n      tokenSymbol={tokenSymbol}\n      cakePrice={cakePrice}\n      apy={apy}\n    />,\n  )\n\n  return (\n    <IconButton onClick={onPresentApyModal} variant=\"text\" size=\"sm\" ml=\"4px\" style={{height: \"24px\"}}>\n      <CalculateIcon />\n    </IconButton>\n  )\n}\n\nexport default ApyButton\n","import React, { useMemo, useState } from \"react\";\nimport BigNumber from \"bignumber.js\";\nimport styled, { keyframes } from \"styled-components\";\nimport { Flex, Text, Skeleton } from \"@pancakeswap-libs/uikit\";\nimport { Farm } from \"state/types\";\nimport { provider } from \"web3-core\";\nimport ExpandableSectionButton from \"components/ExpandableSectionButton\";\nimport DetailsSection from \"./DetailsSection\";\nimport CardHeading from \"./CardHeading\";\nimport CardActionsContainer from \"./CardActionsContainer\";\nimport ApyButton from \"./ApyButton\";\n\nexport interface FarmWithStakedValue extends Farm {\n  apy?: BigNumber\n}\n\ninterface FarmCardProps {\n  farm: FarmWithStakedValue\n  removed: boolean\n  cakePrice?: BigNumber\n  bnbPrice?: BigNumber\n  btcPrice?: BigNumber\n  ethereum?: provider\n  account?: string\n}\n\nconst RainbowLight = keyframes`\n  0% {\n    background-position: 0% 50%;\n  }\n  50% {\n    background-position: 100% 50%;\n  }\n  100% {\n    background-position: 0% 50%;\n  }\n`;\n\nconst StyledCardAccent = styled.div`\n  background: linear-gradient(45deg,\n    rgba(255, 0, 0, 1)      0%,\n    rgba(255, 154, 0, 1)   10%,\n    rgba(197, 20, 20, 1)   20%,\n    rgba(214, 49, 49, 1)   30%,\n    rgba(218, 49, 49, 1)   40%,\n    rgba(214, 191, 27, 1)  50%,\n    rgba(222, 59, 59, 1)   60%,\n    rgba(234, 55, 55, 1)   70%,\n    rgba(208, 62, 62, 1)   80%,\n    rgba(216, 123, 28, 1)  90%,\n    rgba(220, 186, 63, 1) 100%);\n\n  background-size: 300% 300%;\n  border-radius: 0;\n  filter: blur(6px);\n  position: absolute;\n  top: -2px;\n  right: -2px;\n  bottom: -2px;\n  left: -2px;\n  z-index: -1;\n  animation: ${RainbowLight} 2s linear infinite;\n`;\n\nconst FCard = styled.div`\n  align-self: baseline;\n  background: #100000;\n  border-radius: 0;\n  box-shadow: 0px 2px 12px -8px rgba(25, 19, 38, 0.1), 0px 1px 1px rgba(25, 19, 38, 0.05);\n  display: flex;\n  flex-direction: column;\n  justify-content: space-around;\n  padding: 24px;\n  position: relative;\n  text-align: center;\n`;\n\nconst Divider = styled.div`\n  background-color: ${({ theme }) => theme.colors.borderColor};\n  height: 1px;\n  margin: 14px auto;\n  width: 100%;\n`;\n\nconst ExpandingWrapper = styled.div<{ expanded: boolean }>`\n  height: ${(props) => (props.expanded ? \"100%\" : \"0px\")};\n  overflow: hidden;\n`;\n\nconst FarmCard: React.FC<FarmCardProps> = ({ farm, removed, cakePrice, bnbPrice, btcPrice, ethereum, account }) => {\n  const [showExpandableSection, setShowExpandableSection] = useState(false)\n  const farmImage = farm.isTokenOnly ? farm.tokenSymbol.toLowerCase() : `${farm.tokenSymbol.toLowerCase()}-${farm.quoteTokenSymbol.toLowerCase()}`\n\n  const totalValue: BigNumber = useMemo(() => {\n    if (!farm.lpTotalInQuoteToken) {\n      return null\n    }\n\n    if (farm.quoteTokenSymbol === \"BNB\") {\n      return bnbPrice.times(farm.lpTotalInQuoteToken)\n    }\n\n    if (farm.quoteTokenSymbol === \"BEAST\") {\n      return cakePrice.times(farm.lpTotalInQuoteToken)\n    }\n\n    if (farm.quoteTokenSymbol === \"ETH\") {\n      // Every single farm LP pair either contains BNB or a stablecoin, the only exception to this is BTCB-ETH\n      return btcPrice.times(farm.lpTotalInQuoteToken);\n    }\n\n    // Stablecoins ONLY!\n    return farm.lpTotalInQuoteToken\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [farm, bnbPrice, cakePrice, btcPrice, farm.lpTotalInQuoteToken, farm.quoteTokenSymbol])\n\n  const totalValueFormated = totalValue\n    ? `$${Number(totalValue).toLocaleString(undefined, { maximumFractionDigits: 0 })}`\n    : \"-\"\n\n  const lpLabel = farm.lpSymbol\n  const earnLabel = \"BEAST\"\n  const farmAPY = farm.apy && farm.apy.times(new BigNumber(100)).toNumber().toLocaleString(undefined, {\n    minimumFractionDigits: 2,\n    maximumFractionDigits: 2,\n  })\n\n  const {\n    tokenSymbol,\n    tokenAddresses,\n    quoteTokenSymbol,\n    quoteTokenAdresses,\n    risk\n  } = farm;\n\n  return (\n    <FCard style={{border: (farm.tokenSymbol === \"BEAST\" ? \"0\" : \"1px solid #ff9372\")}}>\n\n      {farm.tokenSymbol === \"BEAST\" && <StyledCardAccent />}\n\n      <CardHeading\n        lpLabel={lpLabel}\n        multiplier={farm.multiplier}\n        risk={risk}\n        depositFee={farm.depositFeeBP}\n        farmImage={farmImage}\n        tokenSymbol={farm.tokenSymbol}\n      />\n\n      <Flex justifyContent=\"space-between\">\n        <Text>Earn:</Text>\n        <Text bold>{earnLabel}</Text>\n      </Flex>\n\n      <Flex justifyContent=\"space-between\" alignItems=\"center\">\n        <Text>APR:</Text>\n        <Text bold style={{ display: \"flex\", alignItems: \"center\" }}>\n          {farm.apy ? (\n            <>\n              <ApyButton\n                lpLabel={lpLabel}\n                tokenSymbol={tokenSymbol}\n                tokenAddresses={tokenAddresses}\n                quoteTokenSymbol={quoteTokenSymbol}\n                quoteTokenAdresses={quoteTokenAdresses}\n                cakePrice={cakePrice}\n                apy={farm.apy}\n              />\n              {farmAPY}%\n            </>\n          ) : (\n            <Skeleton height={24} width={80} />\n          )}\n        </Text>\n      </Flex>\n\n      <Flex justifyContent=\"space-between\">\n        <Text>Harvest Lockup:</Text>\n        <Text bold>2 hours</Text>\n      </Flex>\n\n      <Flex justifyContent=\"space-between\">\n        <Text>Deposit Fee:</Text>\n        <Text bold>{(farm.depositFeeBP / 100)}%</Text>\n      </Flex>\n\n      <CardActionsContainer farm={farm} ethereum={ethereum} account={account} />\n\n      <Divider />\n\n      <ExpandableSectionButton\n        onClick={() => setShowExpandableSection(!showExpandableSection)}\n        expanded={showExpandableSection}\n      />\n\n      <ExpandingWrapper expanded={showExpandableSection}>\n        <DetailsSection\n          removed={removed}\n          isTokenOnly={farm.isTokenOnly}\n          bscScanAddress={\n            farm.isTokenOnly ?\n              `https://bscscan.com/token/${farm.tokenAddresses[process.env.REACT_APP_CHAIN_ID]}`\n              :\n              `https://bscscan.com/token/${farm.lpAddresses[process.env.REACT_APP_CHAIN_ID]}`\n          }\n          totalValueFormated={totalValueFormated}\n          lpLabel={lpLabel}\n          tokenSymbol={tokenSymbol}\n          tokenAddresses={tokenAddresses}\n          quoteTokenSymbol={quoteTokenSymbol}\n          quoteTokenAdresses={quoteTokenAdresses}\n        />\n      </ExpandingWrapper>\n    </FCard>\n  )\n};\n\nexport default FarmCard;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport { useRouteMatch, Link } from \"react-router-dom\";\nimport { ButtonMenu, ButtonMenuItem, Text, Toggle } from \"@pancakeswap-libs/uikit\";\n\nconst Wrapper = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  margin-bottom: 32px;\n`;\n\nconst ToggleWrapper = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  margin-right: 32px;\n\n  ${Text} {\n    margin-left: 8px;\n  }\n`;\n\nconst FarmTabButtons = ({ stakedOnly, setStakedOnly }) => {\n  const { url, isExact } = useRouteMatch();\n\n  return (\n    <Wrapper>\n      <ToggleWrapper>\n        <Toggle checked={stakedOnly} onChange={() => setStakedOnly(!stakedOnly)} />\n        <Text>Staked only</Text>\n      </ToggleWrapper>\n\n      <ButtonMenu activeIndex={isExact ? 0 : 1} size=\"sm\" variant=\"subtle\">\n        <ButtonMenuItem as={Link} to={`${url}`}>\n          Active\n        </ButtonMenuItem>\n        <ButtonMenuItem as={Link} to={`${url}/history`}>\n          Inactive\n        </ButtonMenuItem>\n      </ButtonMenu>\n    </Wrapper>\n  );\n};\n\nexport default FarmTabButtons;\n","import React, { useEffect, useCallback, useState } from \"react\";\nimport { Route, useRouteMatch } from \"react-router-dom\";\nimport { useDispatch } from \"react-redux\";\nimport BigNumber from \"bignumber.js\";\nimport styled from \"styled-components\";\nimport { useWallet } from \"@binance-chain/bsc-use-wallet\";\nimport { provider } from \"web3-core\";\nimport { BLOCKS_PER_YEAR } from \"config\";\nimport FlexLayout from \"components/layout/Flex\";\nimport Page from \"components/layout/Page\";\nimport { useFarms, usePriceBnbBusd, usePriceCakeBusd, usePriceBitcoin } from \"state/hooks\";\nimport useRefresh from \"hooks/useRefresh\";\nimport { fetchFarmUserDataAsync } from \"state/actions\";\nimport FarmCard, { FarmWithStakedValue } from \"./components/FarmCard/FarmCard\";\nimport FarmTabButtons from \"./components/FarmTabButtons\";\n\nconst Hero = styled.div`\n  align-items: center;\n  background-image: url('/images/beast-banner.png');\n  background-repeat: no-repeat;\n  background-position: top center;\n  background-size: contain;\n  display: flex;\n  justify-content: center;\n  flex-direction: column;\n  margin: auto;\n  margin-bottom: 32px;\n  min-height: 116px;\n  text-align: center;\n`;\n\nconst Title = styled.div`\n  display: flex;\n  align-items: center;\n  flex-direction: column;\n  font-size: 32px;\n  font-weight: bold;\n  color: white;\n\n  div {\n    display: flex;\n  }\n`;\n\nconst Subtitle = styled.div`\n  display: flex;\n  flex-direction: column;\n  margin-bottom: 16px;\n  color: white;\n`;\n\nexport interface FarmsProps{\n  tokenMode?: boolean\n}\n\nconst Farms: React.FC<FarmsProps> = (farmsProps) => {\n  const { path } = useRouteMatch()\n  const farmsLP = useFarms()\n  const cakePrice = usePriceCakeBusd()\n  const bnbPrice = usePriceBnbBusd()\n  const btcPrice = usePriceBitcoin();\n  const { account, ethereum }: { account: string; ethereum: provider } = useWallet()\n  const {tokenMode} = farmsProps;\n\n  const dispatch = useDispatch()\n  const { fastRefresh } = useRefresh()\n  useEffect(() => {\n    if (account) {\n      dispatch(fetchFarmUserDataAsync(account))\n    }\n  }, [account, dispatch, fastRefresh])\n\n  const [stakedOnly, setStakedOnly] = useState(false)\n  const activeFarms = farmsLP.filter((farm) => !!farm.isTokenOnly === !!tokenMode && farm.multiplier !== \"0X\")\n  const inactiveFarms = farmsLP.filter((farm) => !!farm.isTokenOnly === !!tokenMode && farm.multiplier === \"0X\")\n\n  const stakedOnlyFarms = activeFarms.filter(\n    (farm) => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0),\n  )\n\n  const farmsList = useCallback(\n    (farmsToDisplay, removed: boolean) => {\n      const farmsToDisplayWithAPY: FarmWithStakedValue[] = farmsToDisplay.map((farm) => {\n        const cakeRewardPerBlock = new BigNumber(farm.beastPerBlock || 1).times(new BigNumber(farm.poolWeight)) .div(new BigNumber(10).pow(18))\n        const cakeRewardPerYear = cakeRewardPerBlock.times(BLOCKS_PER_YEAR)\n\n        let apy = cakePrice.times(cakeRewardPerYear);\n        let totalValue = new BigNumber(farm.lpTotalInQuoteToken || 0);\n\n        if (farm.quoteTokenSymbol === \"BNB\") {\n          totalValue = totalValue.times(bnbPrice);\n        }\n\n        if(totalValue.comparedTo(0) > 0){\n          apy = apy.div(totalValue);\n        }\n\n        return { ...farm, apy }\n      })\n\n      return farmsToDisplayWithAPY.map((farm) => (\n        <FarmCard\n          key={farm.pid}\n          farm={farm}\n          removed={removed}\n          bnbPrice={bnbPrice}\n          cakePrice={cakePrice}\n          btcPrice={btcPrice}\n          ethereum={ethereum}\n          account={account}\n        />\n      ))\n    },\n    [cakePrice, bnbPrice, btcPrice, ethereum, account],\n  )\n\n  return (\n    <Page>\n      <Hero>\n        <Title>\n          <div>BEAST</div>\n          <div>Farms</div>\n        </Title>\n      </Hero>\n\n      <Subtitle>\n        <div>Stake LP tokens to earn BEAST</div>\n        <div>Deposit fees will be used to buyback BEAST</div>\n      </Subtitle>\n\n      <FarmTabButtons stakedOnly={stakedOnly} setStakedOnly={setStakedOnly}/>\n\n      <div>\n        <FlexLayout>\n          <Route exact path={`${path}`}>\n            {stakedOnly ? farmsList(stakedOnlyFarms, false) : farmsList(activeFarms, false)}\n          </Route>\n          <Route exact path={`${path}/history`}>\n            {farmsList(inactiveFarms, true)}\n          </Route>\n        </FlexLayout>\n      </div>\n    </Page>\n  )\n};\n\nexport default Farms;\n"],"sourceRoot":""}