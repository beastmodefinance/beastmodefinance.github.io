{"version":3,"sources":["components/Spacer/Spacer.tsx","components/ModalActions/ModalActions.tsx","components/Input/Input.tsx","components/TokenInput/TokenInput.tsx","utils/erc20.ts","config/index.ts","components/layout/Flex.tsx","components/Tags.tsx","hooks/useApprove.ts","hooks/useStake.ts","hooks/useUnstake.ts","components/ExpandableSectionButton/ExpandableSectionButton.tsx","utils/getLiquidityUrlPathParts.ts","views/Farms/components/FarmCard/DetailsSection.tsx","views/Farms/components/FarmCard/CardHeading.tsx","views/Farms/components/DepositModal.tsx","views/Farms/components/WithdrawModal.tsx","views/Farms/components/FarmCard/StakeAction.tsx","views/Farms/components/FarmCard/HarvestAction.tsx","views/Farms/components/FarmCard/CardActionsContainer.tsx","utils/compoundApyHelpers.ts","views/Farms/components/FarmCard/ApyCalculatorModal.tsx","views/Farms/components/FarmCard/ApyButton.tsx","views/Farms/components/FarmCard/FarmCard.tsx","views/Farms/components/FarmTabButtons/index.tsx","views/Farms/Farms.tsx"],"names":["StyledSpacer","styled","div","props","size","Spacer","s","spacing","useContext","ThemeContext","StyledModalActions","theme","StyledModalAction","ModalActions","children","l","React","Children","toArray","length","map","child","i","StyledInputWrapper","colors","input","radii","default","StyledInput","primary","Input","endAdornment","onChange","placeholder","startAdornment","value","StyledTokenInput","StyledTokenAdornmentWrapper","StyledMaxText","StyledTokenSymbol","span","TokenInput","max","symbol","onSelectMax","depositFeeBP","TranslateString","useI18n","toLocaleString","onClick","BigNumber","times","toString","getContract","provider","address","Web3","eth","Contract","erc20","getTokenBalance","tokenAddress","userAddress","a","contract","methods","balanceOf","call","balance","config","EXPONENTIAL_AT","DECIMAL_PLACES","BLOCKS_PER_YEAR","FlexLayout","NoFeeTag","variant","outline","startIcon","CoreTag","CommunityTag","BinanceTag","useApprove","lpContract","dispatch","useDispatch","account","useWallet","masterChefContract","useMasterchef","onApprove","useCallback","approve","tx","fetchFarmUserDataAsync","useSousApprove","sousId","sousChefContract","useSousChef","updateUserAllowance","useSousStake","isUsingBnb","handleStake","amount","stake","sousStakeBnb","sousStake","updateUserStakedBalance","updateUserBalance","onStake","useStake","pid","txHash","console","info","SYRUPIDS","useSousUnstake","isOldSyrup","includes","onUnstake","unstake","sousEmegencyUnstake","sousUnstake","updateUserPendingReward","useUnstake","Wrapper","ExpandableSectionButton","expanded","aria-label","role","color","bold","defaultProps","getLiquidityUrlPathParts","quoteTokenAdresses","quoteTokenSymbol","tokenAddresses","firstPart","process","secondPart","StyledLinkExternal","LinkExternal","text","DetailsSection","isTokenOnly","bscScanAddress","removed","totalValueFormated","lpLabel","liquidityUrlPathParts","justifyContent","href","external","Flex","MultiplierTag","Tag","CardHeading","multiplier","farmImage","risk","tokenSymbol","depositFee","alignItems","mb","src","alt","width","height","flexDirection","DepositModal","onConfirm","onDismiss","tokenName","useState","val","setVal","pendingTx","setPendingTx","fullBalance","useMemo","getFullDisplayBalance","handleChange","e","currentTarget","handleSelectMax","title","disabled","WithdrawModal","IconButtonWrapper","StakeAction","stakedBalance","tokenBalance","rawStakedBalance","getBalanceNumber","displayBalance","useModal","onPresentDeposit","onPresentWithdraw","mr","BalanceAndCompound","HarvestAction","earnings","onReward","useHarvest","rawEarningsBalance","Action","CardActions","farm","ethereum","requestedApproval","setRequestedApproval","useFarmFromPid","lpAddresses","useFarmUser","allowance","lpAddress","lpName","lpSymbol","toUpperCase","isApproved","isGreaterThan","handleApprove","error","textTransform","fontSize","pr","mt","fullWidth","UnlockButton","calculateCakeEarnedPerThousandDollars","number","numberOfDays","apyAsDecimal","farmApy","daysAsDecimalOfYear","principal","cakePrice","finalAmount","Math","round","apyModalRoi","amountEarned","amountInvested","toFixed","Grid","GridItem","Description","Text","ApyCalculatorModal","apy","toNumber","oneThousandDollarsWorthOfCake","cakeEarnedPerThousand1D","cakeEarnedPerThousand7D","cakeEarnedPerThousand30D","cakeEarnedPerThousand365D","ApyButton","onPresentApyModal","ml","RainbowLight","keyframes","StyledCardAccent","FCard","Divider","borderColor","ExpandingWrapper","FarmCard","bnbPrice","showExpandableSection","setShowExpandableSection","toLowerCase","totalValue","lpTotalInQuoteToken","Number","undefined","maximumFractionDigits","farmAPY","minimumFractionDigits","style","border","display","CardActionsContainer","FarmTabButtons","stakedOnly","setStakedOnly","useRouteMatch","url","isExact","ToggleWrapper","checked","activeIndex","as","Link","to","Hero","Farms","farmsProps","path","farmsLP","useFarms","usePriceCakeBusd","usePriceBnbBusd","tokenMode","fastRefresh","useRefresh","useEffect","activeFarms","filter","inactiveFarms","stakedOnlyFarms","userData","farmsList","farmsToDisplay","cakeRewardPerYear","eggPerBlock","poolWeight","pow","comparedTo","Page","exact"],"mappings":"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","file":"static/js/8.d7a3a661.chunk.js","sourcesContent":["import React, { useContext } from 'react'\nimport styled, { ThemeContext } from 'styled-components'\n\ninterface SpacerProps {\n  size?: 'sm' | 'md' | 'lg'\n}\n\nconst Spacer: React.FC<SpacerProps> = ({ size = 'md' }) => {\n  const { spacing } = useContext(ThemeContext)\n\n  let s: number\n  switch (size) {\n    case 'lg':\n      s = spacing[6]\n      break\n    case 'sm':\n      s = spacing[2]\n      break\n    case 'md':\n    default:\n      s = spacing[4]\n  }\n\n  return <StyledSpacer size={s} />\n}\n\ninterface StyledSpacerProps {\n  size: number\n}\n\nconst StyledSpacer = styled.div<StyledSpacerProps>`\n  height: ${(props) => props.size}px;\n  width: ${(props) => props.size}px;\n`\n\nexport default Spacer\n","import React from 'react'\nimport styled from 'styled-components'\n\nimport Spacer from '../Spacer'\n\nconst ModalActions: React.FC = ({ children }) => {\n  const l = React.Children.toArray(children).length\n  return (\n    <StyledModalActions>\n      {React.Children.map(children, (child, i) => (\n        <>\n          <StyledModalAction>{child}</StyledModalAction>\n          {i < l - 1 && <Spacer />}\n        </>\n      ))}\n    </StyledModalActions>\n  )\n}\n\nconst StyledModalActions = styled.div`\n  align-items: center;\n  background-color: #abc12300;\n  display: flex;\n  margin: 0;\n  padding: ${(props) => props.theme.spacing[4]}px;\n`\n\nconst StyledModalAction = styled.div`\n  flex: 1;\n  text-align: center;\n`\n\nexport default ModalActions\n","import React from 'react'\nimport styled from 'styled-components'\n\nexport interface InputProps {\n  endAdornment?: React.ReactNode\n  onChange: (e: React.FormEvent<HTMLInputElement>) => void\n  placeholder?: string\n  startAdornment?: React.ReactNode\n  value: string\n}\n\nconst Input: React.FC<InputProps> = ({ endAdornment, onChange, placeholder, startAdornment, value }) => {\n  return (\n    <StyledInputWrapper>\n      {!!startAdornment && startAdornment}\n      <StyledInput placeholder={placeholder} value={value} onChange={onChange} />\n      {!!endAdornment && endAdornment}\n    </StyledInputWrapper>\n  )\n}\n\nconst StyledInputWrapper = styled.div`\n  align-items: center;\n  background-color: ${(props) => props.theme.colors.input};\n  border-radius: ${(props) => props.theme.radii.default};\n  display: flex;\n  height: 72px;\n  padding: 0 ${(props) => props.theme.spacing[3]}px;\n`\n\nconst StyledInput = styled.input`\n  width: 100%;\n  background: none;\n  border: 0;\n  color: ${(props) => props.theme.colors.primary};\n  font-size: 18px;\n  flex: 1;\n  height: 56px;\n  margin: 0;\n  padding: 0;\n  outline: none;\n`\n\nexport default Input\n","import React from 'react'\nimport styled from 'styled-components'\nimport BigNumber from 'bignumber.js/bignumber'\nimport { Button } from '@pancakeswap-libs/uikit'\nimport useI18n from '../../hooks/useI18n'\nimport Input, { InputProps } from '../Input'\n\ninterface TokenInputProps extends InputProps {\n  max: number | string\n  symbol: string\n  onSelectMax?: () => void\n  depositFeeBP?: number\n}\n\nconst TokenInput: React.FC<TokenInputProps> = ({ max, symbol, onChange, onSelectMax, value, depositFeeBP = 0 }) => {\n  const TranslateString = useI18n()\n  return (\n    <StyledTokenInput>\n      <StyledMaxText>\n        {max.toLocaleString()} {symbol} {TranslateString(526, 'Available')}\n      </StyledMaxText>\n      <Input\n        endAdornment={\n          <StyledTokenAdornmentWrapper>\n            <StyledTokenSymbol>{symbol}</StyledTokenSymbol>\n            <StyledSpacer />\n            <div>\n              <Button size=\"sm\" onClick={onSelectMax}>\n                {TranslateString(452, 'Max')}\n              </Button>\n            </div>\n          </StyledTokenAdornmentWrapper>\n        }\n        onChange={onChange}\n        placeholder=\"0\"\n        value={value}\n      />\n      {\n        depositFeeBP > 0 ?\n          <StyledMaxText>\n            Deposit Fee: {new BigNumber(value || 0).times(depositFeeBP/10000).toString()} {symbol}\n          </StyledMaxText>\n          :\n          null\n      }\n\n    </StyledTokenInput>\n  )\n}\n\nconst StyledTokenInput = styled.div``\n\nconst StyledSpacer = styled.div`\n  width: ${(props) => props.theme.spacing[3]}px;\n`\n\nconst StyledTokenAdornmentWrapper = styled.div`\n  align-items: center;\n  display: flex;\n`\n\nconst StyledMaxText = styled.div`\n  align-items: center;\n  color: ${(props) => props.theme.colors.primary};\n  display: flex;\n  font-size: 14px;\n  font-weight: 700;\n  height: 44px;\n  justify-content: flex-end;\n`\n\nconst StyledTokenSymbol = styled.span`\n  color: ${(props) => props.theme.colors.primary};\n  font-weight: 700;\n`\n\nexport default TokenInput\n","import Web3 from 'web3'\nimport { provider as ProviderType } from 'web3-core'\nimport { Contract } from 'web3-eth-contract'\nimport { AbiItem } from 'web3-utils'\nimport erc20 from 'config/abi/erc20.json'\n\nexport const getContract = (provider: ProviderType, address: string) => {\n  const web3 = new Web3(provider)\n  const contract = new web3.eth.Contract((erc20 as unknown) as AbiItem, address)\n  return contract\n}\n\nexport const getAllowance = async (\n  lpContract: Contract,\n  masterChefContract: Contract,\n  account: string,\n): Promise<string> => {\n  try {\n    const allowance: string = await lpContract.methods.allowance(account, masterChefContract.options.address).call()\n    return allowance\n  } catch (e) {\n    return '0'\n  }\n}\n\nexport const getTokenBalance = async (\n  provider: ProviderType,\n  tokenAddress: string,\n  userAddress: string,\n): Promise<string> => {\n  const contract = getContract(provider, tokenAddress)\n  try {\n    const balance: string = await contract.methods.balanceOf(userAddress).call()\n    return balance\n  } catch (e) {\n    return '0'\n  }\n}\n","import BigNumber from 'bignumber.js/bignumber'\n\nBigNumber.config({\n  EXPONENTIAL_AT: 1000,\n  DECIMAL_PLACES: 80,\n})\n\nexport const CAKE_PER_BLOCK = new BigNumber(1)\nexport const BLOCKS_PER_YEAR = new BigNumber(10512000)\nexport const BSC_BLOCK_TIME = 3\n\nexport const CAKE_POOL_PID = 1\n","import styled from 'styled-components'\n\nconst FlexLayout = styled.div`\n  display: flex;\n  justify-content: center;\n  flex-wrap: wrap;\n  & > * {\n    min-width: 280px;\n    max-width: 31.5%;\n    width: 100%;\n    margin: 0 8px;\n    margin-bottom: 32px;\n  }\n`\n\nexport default FlexLayout\n","import React from 'react'\nimport { Tag, VerifiedIcon, CommunityIcon, BinanceIcon } from '@pancakeswap-libs/uikit'\n\nconst NoFeeTag = () => (\n  <Tag variant=\"success\" outline startIcon={<VerifiedIcon />}>\n    No Fees\n  </Tag>\n)\n\nconst RiskTag = ({ risk }) => (\n  <Tag variant={risk >= 3 ? 'failure' : 'success'} outline startIcon={<VerifiedIcon />}>\n    Risk {risk}\n  </Tag>\n)\n\nconst CoreTag = () => (\n  <Tag variant='secondary' outline startIcon={<VerifiedIcon />}>\n    Core\n  </Tag>\n)\n\nconst CommunityTag = () => (\n  <Tag variant='textSubtle' outline startIcon={<CommunityIcon />}>\n    Community\n  </Tag>\n)\n\nconst BinanceTag = () => (\n  <Tag variant='binance' outline startIcon={<BinanceIcon />}>\n    Binance\n  </Tag>\n)\n\nexport { CoreTag, CommunityTag, BinanceTag, RiskTag, NoFeeTag }\n","import { useCallback } from 'react'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { Contract } from 'web3-eth-contract'\nimport { ethers } from 'ethers'\nimport { useDispatch } from 'react-redux'\nimport { updateUserAllowance, fetchFarmUserDataAsync } from 'state/actions'\nimport { approve } from 'utils/callHelpers'\nimport { useMasterchef, useCake, useSousChef, useLottery } from './useContract'\n\n// Approve a Farm\nexport const useApprove = (lpContract: Contract) => {\n  const dispatch = useDispatch()\n  const { account }: { account: string } = useWallet()\n  const masterChefContract = useMasterchef()\n\n  const handleApprove = useCallback(async () => {\n    try {\n      const tx = await approve(lpContract, masterChefContract, account)\n      dispatch(fetchFarmUserDataAsync(account))\n      return tx\n    } catch (e) {\n      return false\n    }\n  }, [account, dispatch, lpContract, masterChefContract])\n\n  return { onApprove: handleApprove }\n}\n\n// Approve a Pool\nexport const useSousApprove = (lpContract: Contract, sousId) => {\n  const dispatch = useDispatch()\n  const { account }: { account: string } = useWallet()\n  const sousChefContract = useSousChef(sousId)\n\n  const handleApprove = useCallback(async () => {\n    try {\n      const tx = await approve(lpContract, sousChefContract, account)\n      dispatch(updateUserAllowance(sousId, account))\n      return tx\n    } catch (e) {\n      return false\n    }\n  }, [account, dispatch, lpContract, sousChefContract, sousId])\n\n  return { onApprove: handleApprove }\n}\n\n// Approve the lottery\nexport const useLotteryApprove = () => {\n  const { account }: { account: string } = useWallet()\n  const cakeContract = useCake()\n  const lotteryContract = useLottery()\n\n  const handleApprove = useCallback(async () => {\n    try {\n      const tx = await approve(cakeContract, lotteryContract, account)\n      return tx\n    } catch (e) {\n      return false\n    }\n  }, [account, cakeContract, lotteryContract])\n\n  return { onApprove: handleApprove }\n}\n\n// Approve an IFO\nexport const useIfoApprove = (tokenContract: Contract, spenderAddress: string) => {\n  const { account } = useWallet()\n  const onApprove = useCallback(async () => {\n    try {\n      const tx = await tokenContract.methods\n        .approve(spenderAddress, ethers.constants.MaxUint256)\n        .send({ from: account })\n      return tx\n    } catch {\n      return false\n    }\n  }, [account, spenderAddress, tokenContract])\n\n  return onApprove\n}\n","import { useCallback } from 'react'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { useDispatch } from 'react-redux'\nimport { fetchFarmUserDataAsync, updateUserStakedBalance, updateUserBalance } from 'state/actions'\nimport { stake, sousStake, sousStakeBnb } from 'utils/callHelpers'\nimport { useMasterchef, useSousChef } from './useContract'\n\nconst useStake = (pid: number) => {\n  const dispatch = useDispatch()\n  const { account } = useWallet()\n  const masterChefContract = useMasterchef()\n\n  const handleStake = useCallback(\n    async (amount: string) => {\n      const txHash = await stake(masterChefContract, pid, amount, account)\n      dispatch(fetchFarmUserDataAsync(account))\n      console.info(txHash)\n    },\n    [account, dispatch, masterChefContract, pid],\n  )\n\n  return { onStake: handleStake }\n}\n\nexport const useSousStake = (sousId, isUsingBnb = false) => {\n  const dispatch = useDispatch()\n  const { account } = useWallet()\n  const masterChefContract = useMasterchef()\n  const sousChefContract = useSousChef(sousId)\n\n  const handleStake = useCallback(\n    async (amount: string) => {\n      if (sousId === 0) {\n        await stake(masterChefContract, 0, amount, account)\n      } else if (isUsingBnb) {\n        await sousStakeBnb(sousChefContract, amount, account)\n      } else {\n        await sousStake(sousChefContract, amount, account)\n      }\n      dispatch(updateUserStakedBalance(sousId, account))\n      dispatch(updateUserBalance(sousId, account))\n    },\n    [account, dispatch, isUsingBnb, masterChefContract, sousChefContract, sousId],\n  )\n\n  return { onStake: handleStake }\n}\n\nexport default useStake\n","import { useCallback } from 'react'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { useDispatch } from 'react-redux'\nimport {\n  fetchFarmUserDataAsync,\n  updateUserStakedBalance,\n  updateUserBalance,\n  updateUserPendingReward,\n} from 'state/actions'\nimport { unstake, sousUnstake, sousEmegencyUnstake } from 'utils/callHelpers'\nimport { useMasterchef, useSousChef } from './useContract'\n\nconst useUnstake = (pid: number) => {\n  const dispatch = useDispatch()\n  const { account } = useWallet()\n  const masterChefContract = useMasterchef()\n\n  const handleUnstake = useCallback(\n    async (amount: string) => {\n      const txHash = await unstake(masterChefContract, pid, amount, account)\n      dispatch(fetchFarmUserDataAsync(account))\n      console.info(txHash)\n    },\n    [account, dispatch, masterChefContract, pid],\n  )\n\n  return { onUnstake: handleUnstake }\n}\n\nconst SYRUPIDS = [5, 6, 3, 1, 22, 23]\n\nexport const useSousUnstake = (sousId) => {\n  const dispatch = useDispatch()\n  const { account } = useWallet()\n  const masterChefContract = useMasterchef()\n  const sousChefContract = useSousChef(sousId)\n  const isOldSyrup = SYRUPIDS.includes(sousId)\n\n  const handleUnstake = useCallback(\n    async (amount: string) => {\n      if (sousId === 0) {\n        const txHash = await unstake(masterChefContract, 0, amount, account)\n        console.info(txHash)\n      } else if (isOldSyrup) {\n        const txHash = await sousEmegencyUnstake(sousChefContract, amount, account)\n        console.info(txHash)\n      } else {\n        const txHash = await sousUnstake(sousChefContract, amount, account)\n        console.info(txHash)\n      }\n      dispatch(updateUserStakedBalance(sousId, account))\n      dispatch(updateUserBalance(sousId, account))\n      dispatch(updateUserPendingReward(sousId, account))\n    },\n    [account, dispatch, isOldSyrup, masterChefContract, sousChefContract, sousId],\n  )\n\n  return { onUnstake: handleUnstake }\n}\n\nexport default useUnstake\n","import React from 'react'\nimport styled from 'styled-components'\nimport { ChevronDownIcon, ChevronUpIcon, Text } from '@pancakeswap-libs/uikit'\n\nexport interface ExpandableSectionButtonProps {\n  onClick?: () => void\n  expanded?: boolean\n}\n\nconst Wrapper = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  cursor: pointer;\n\n  svg {\n    fill: ${({ theme }) => theme.colors.primary};\n  }\n`\n\nconst ExpandableSectionButton: React.FC<ExpandableSectionButtonProps> = ({ onClick, expanded }) => {\n  return (\n    <Wrapper aria-label=\"Hide or show expandable content\" role=\"button\" onClick={() => onClick()}>\n      <Text color=\"primary\" bold>\n        {expanded ? 'Hide' : 'Details'}\n      </Text>\n      {expanded ? <ChevronUpIcon /> : <ChevronDownIcon />}\n    </Wrapper>\n  )\n}\n\nExpandableSectionButton.defaultProps = {\n  expanded: false,\n}\n\nexport default ExpandableSectionButton\n","// Constructing the two forward-slash-separated parts of the 'Add Liquidity' URL\n// Each part of the url represents a different side of the LP pair.\n// In the URL, using the quote token 'BNB' is represented by 'ETH'\nconst getLiquidityUrlPathParts = ({ quoteTokenAdresses, quoteTokenSymbol, tokenAddresses }) => {\n  const chainId = process.env.REACT_APP_CHAIN_ID\n  const firstPart = quoteTokenSymbol === 'BNB' ? 'ETH' : quoteTokenAdresses[chainId]\n  const secondPart = tokenAddresses[chainId]\n  return `${firstPart}/${secondPart}`\n}\n\nexport default getLiquidityUrlPathParts\n","import React from 'react'\nimport useI18n from 'hooks/useI18n'\nimport styled from 'styled-components'\nimport { Text, Flex, Link, LinkExternal } from '@pancakeswap-libs/uikit'\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\nimport { Address } from 'config/constants/types'\n\nexport interface ExpandableSectionProps {\n  isTokenOnly?: boolean\n  bscScanAddress?: string\n  removed?: boolean\n  totalValueFormated?: string\n  lpLabel?: string\n  quoteTokenAdresses?: Address\n  quoteTokenSymbol?: string\n  tokenAddresses: Address\n}\n\nconst Wrapper = styled.div`\n  margin-top: 24px;\n`\n\nconst StyledLinkExternal = styled(LinkExternal)`\n  text-decoration: none;\n  font-weight: normal;\n  color: ${({ theme }) => theme.colors.text};\n  display: flex;\n  align-items: center;\n\n  svg {\n    padding-left: 4px;\n    height: 18px;\n    width: auto;\n    fill: ${({ theme }) => theme.colors.primary};\n  }\n`\n\nconst DetailsSection: React.FC<ExpandableSectionProps> = ({\n  isTokenOnly,\n  bscScanAddress,\n  removed,\n  totalValueFormated,\n  lpLabel,\n  quoteTokenAdresses,\n  quoteTokenSymbol,\n  tokenAddresses,\n}) => {\n  const TranslateString = useI18n()\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({ quoteTokenAdresses, quoteTokenSymbol, tokenAddresses })\n\n  return (\n    <Wrapper>\n      <Flex justifyContent=\"space-between\">\n        <Text>{TranslateString(316, 'Stake')}:</Text>\n        <StyledLinkExternal href={\n          isTokenOnly ?\n            `https://exchange.goosedefi.com/#/swap/${tokenAddresses[process.env.REACT_APP_CHAIN_ID]}`\n            :\n          `https://exchange.goosedefi.com/#/add/${liquidityUrlPathParts}`\n        }>\n          {lpLabel}\n        </StyledLinkExternal>\n      </Flex>\n      {!removed && (\n        <Flex justifyContent=\"space-between\">\n          <Text>{TranslateString(23, 'Total Liquidity')}:</Text>\n          <Text>{totalValueFormated}</Text>\n        </Flex>\n      )}\n      <Flex justifyContent=\"flex-start\">\n        <Link external href={bscScanAddress} bold={false}>\n          {TranslateString(356, 'View on BscScan')}\n        </Link>\n      </Flex>\n    </Wrapper>\n  )\n}\n\nexport default DetailsSection\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Tag, Flex, Heading, Image } from '@pancakeswap-libs/uikit'\nimport { NoFeeTag } from 'components/Tags'\n// import { CommunityTag, CoreTag, NoFeeTag, RiskTag } from 'components/Tags'\n\nexport interface ExpandableSectionProps {\n  lpLabel?: string\n  multiplier?: string\n  risk?: number\n  depositFee?: number\n  farmImage?: string\n  tokenSymbol?: string\n}\n\nconst Wrapper = styled(Flex)`\n  svg {\n    margin-right: 0.25rem;\n  }\n`\n\nconst MultiplierTag = styled(Tag)`\n  margin-left: 4px;\n`\n\nconst CardHeading: React.FC<ExpandableSectionProps> = ({\n  lpLabel,\n  multiplier,\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  risk,\n  farmImage,\n  tokenSymbol,\n  depositFee,\n}) => {\n  return (\n    <Wrapper justifyContent=\"space-between\" alignItems=\"center\" mb=\"12px\">\n      <Image src={`/images/farms/${farmImage}.png`} alt={tokenSymbol} width={64} height={64} />\n      <Flex flexDirection=\"column\" alignItems=\"flex-end\">\n        <Heading mb=\"4px\">{lpLabel}</Heading>\n        <Flex justifyContent=\"center\">\n          {depositFee === 0 ? <NoFeeTag /> : null}\n          {/* {isCommunityFarm ? <CommunityTag /> : <CoreTag />} */}\n          {/* <RiskTag risk={risk} /> */}\n          <MultiplierTag variant=\"secondary\">{multiplier}</MultiplierTag>\n        </Flex>\n      </Flex>\n    </Wrapper>\n  )\n}\n\nexport default CardHeading\n","import BigNumber from 'bignumber.js'\nimport React, { useCallback, useMemo, useState } from 'react'\nimport { Button, Modal } from '@pancakeswap-libs/uikit'\nimport ModalActions from 'components/ModalActions'\nimport TokenInput from 'components/TokenInput'\nimport useI18n from 'hooks/useI18n'\nimport { getFullDisplayBalance } from 'utils/formatBalance'\n\ninterface DepositModalProps {\n  max: BigNumber\n  onConfirm: (amount: string) => void\n  onDismiss?: () => void\n  tokenName?: string\n  depositFeeBP?: number\n}\n\nconst DepositModal: React.FC<DepositModalProps> = ({ max, onConfirm, onDismiss, tokenName = '' , depositFeeBP = 0}) => {\n  const [val, setVal] = useState('')\n  const [pendingTx, setPendingTx] = useState(false)\n  const TranslateString = useI18n()\n  const fullBalance = useMemo(() => {\n    return getFullDisplayBalance(max)\n  }, [max])\n\n  const handleChange = useCallback(\n    (e: React.FormEvent<HTMLInputElement>) => {\n      setVal(e.currentTarget.value)\n    },\n    [setVal],\n  )\n\n  const handleSelectMax = useCallback(() => {\n    setVal(fullBalance)\n  }, [fullBalance, setVal])\n\n  return (\n    <Modal title={`${TranslateString(316, 'Deposit')} ${tokenName} Tokens`} onDismiss={onDismiss}>\n      <TokenInput\n        value={val}\n        onSelectMax={handleSelectMax}\n        onChange={handleChange}\n        max={fullBalance}\n        symbol={tokenName}\n        depositFeeBP={depositFeeBP}\n      />\n      <ModalActions>\n        <Button variant=\"secondary\" onClick={onDismiss}>\n          {TranslateString(462, 'Cancel')}\n        </Button>\n        <Button\n          disabled={pendingTx}\n          onClick={async () => {\n            setPendingTx(true)\n            await onConfirm(val)\n            setPendingTx(false)\n            onDismiss()\n          }}\n        >\n          {pendingTx ? TranslateString(488, 'Pending Confirmation') : TranslateString(464, 'Confirm')}\n        </Button>\n      </ModalActions>\n    </Modal>\n  )\n}\n\nexport default DepositModal\n","import BigNumber from 'bignumber.js'\nimport React, { useCallback, useMemo, useState } from 'react'\nimport { Button, Modal } from '@pancakeswap-libs/uikit'\nimport ModalActions from 'components/ModalActions'\nimport TokenInput from 'components/TokenInput'\nimport useI18n from 'hooks/useI18n'\nimport { getFullDisplayBalance } from 'utils/formatBalance'\n\ninterface WithdrawModalProps {\n  max: BigNumber\n  onConfirm: (amount: string) => void\n  onDismiss?: () => void\n  tokenName?: string\n}\n\nconst WithdrawModal: React.FC<WithdrawModalProps> = ({ onConfirm, onDismiss, max, tokenName = '' }) => {\n  const [val, setVal] = useState('')\n  const [pendingTx, setPendingTx] = useState(false)\n  const TranslateString = useI18n()\n  const fullBalance = useMemo(() => {\n    return getFullDisplayBalance(max)\n  }, [max])\n\n  const handleChange = useCallback(\n    (e: React.FormEvent<HTMLInputElement>) => {\n      setVal(e.currentTarget.value)\n    },\n    [setVal],\n  )\n\n  const handleSelectMax = useCallback(() => {\n    setVal(fullBalance)\n  }, [fullBalance, setVal])\n\n  return (\n    <Modal title={`Withdraw ${tokenName}`} onDismiss={onDismiss}>\n      <TokenInput\n        onSelectMax={handleSelectMax}\n        onChange={handleChange}\n        value={val}\n        max={fullBalance}\n        symbol={tokenName}\n      />\n      <ModalActions>\n        <Button variant=\"secondary\" onClick={onDismiss}>\n          {TranslateString(462, 'Cancel')}\n        </Button>\n        <Button\n          disabled={pendingTx}\n          onClick={async () => {\n            setPendingTx(true)\n            await onConfirm(val)\n            setPendingTx(false)\n            onDismiss()\n          }}\n        >\n          {pendingTx ? TranslateString(488, 'Pending Confirmation') : TranslateString(464, 'Confirm')}\n        </Button>\n      </ModalActions>\n    </Modal>\n  )\n}\n\nexport default WithdrawModal\n","import React from 'react'\nimport styled from 'styled-components'\nimport BigNumber from 'bignumber.js'\nimport { Button, Flex, Heading, IconButton, AddIcon, MinusIcon, useModal } from '@pancakeswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\nimport useStake from 'hooks/useStake'\nimport useUnstake from 'hooks/useUnstake'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport DepositModal from '../DepositModal'\nimport WithdrawModal from '../WithdrawModal'\n\ninterface FarmCardActionsProps {\n  stakedBalance?: BigNumber\n  tokenBalance?: BigNumber\n  tokenName?: string\n  pid?: number\n  depositFeeBP?: number\n}\n\nconst IconButtonWrapper = styled.div`\n  display: flex;\n  svg {\n    width: 20px;\n  }\n`\n\nconst StakeAction: React.FC<FarmCardActionsProps> = ({ stakedBalance, tokenBalance, tokenName, pid, depositFeeBP}) => {\n  const TranslateString = useI18n()\n  const { onStake } = useStake(pid)\n  const { onUnstake } = useUnstake(pid)\n\n  const rawStakedBalance = getBalanceNumber(stakedBalance)\n  const displayBalance = rawStakedBalance.toLocaleString()\n\n  const [onPresentDeposit] = useModal(<DepositModal max={tokenBalance} onConfirm={onStake} tokenName={tokenName} depositFeeBP={depositFeeBP} />)\n  const [onPresentWithdraw] = useModal(\n    <WithdrawModal max={stakedBalance} onConfirm={onUnstake} tokenName={tokenName} />,\n  )\n\n  const renderStakingButtons = () => {\n    return rawStakedBalance === 0 ? (\n      <Button onClick={onPresentDeposit}>{TranslateString(999, 'Stake')}</Button>\n    ) : (\n      <IconButtonWrapper>\n        <IconButton variant=\"tertiary\" onClick={onPresentWithdraw} mr=\"6px\">\n          <MinusIcon color=\"primary\" />\n        </IconButton>\n        <IconButton variant=\"tertiary\" onClick={onPresentDeposit}>\n          <AddIcon color=\"primary\" />\n        </IconButton>\n      </IconButtonWrapper>\n    )\n  }\n\n  return (\n    <Flex justifyContent=\"space-between\" alignItems=\"center\">\n      <Heading color={rawStakedBalance === 0 ? 'textDisabled' : 'text'}>{displayBalance}</Heading>\n      {renderStakingButtons()}\n    </Flex>\n  )\n}\n\nexport default StakeAction\n","import React, { useState } from \"react\";\nimport BigNumber from \"bignumber.js\";\nimport { Button, Flex, Heading } from \"@pancakeswap-libs/uikit\";\nimport { useHarvest } from \"hooks/useHarvest\";\nimport { getBalanceNumber } from \"utils/formatBalance\";\nimport styled from \"styled-components\";\n\ninterface FarmCardActionsProps {\n  earnings?: BigNumber\n  pid?: number\n}\n\nconst BalanceAndCompound = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  flex-direction: column;\n`;\n\nconst HarvestAction: React.FC<FarmCardActionsProps> = ({ earnings, pid }) => {\n  const [pendingTx, setPendingTx] = useState(false);\n  const { onReward } = useHarvest(pid);\n\n  const rawEarningsBalance = getBalanceNumber(earnings);\n  const displayBalance = rawEarningsBalance.toLocaleString();\n\n  return (\n    <Flex mb=\"8px\" justifyContent=\"space-between\" alignItems=\"center\">\n      <Heading color={rawEarningsBalance === 0 ? \"textDisabled\" : \"text\"}>{displayBalance}</Heading>\n      <BalanceAndCompound>\n        <Button\n          disabled={rawEarningsBalance === 0 || pendingTx}\n          onClick={async () => {\n            setPendingTx(true)\n            await onReward()\n            setPendingTx(false)\n          }}\n        >\n          Harvest\n        </Button>\n      </BalanceAndCompound>\n    </Flex>\n  );\n};\n\nexport default HarvestAction;\n","import React, { useMemo, useState, useCallback } from 'react'\nimport BigNumber from 'bignumber.js'\nimport styled from 'styled-components'\nimport { provider } from 'web3-core'\nimport { getContract } from 'utils/erc20'\nimport { Button, Flex, Text } from '@pancakeswap-libs/uikit'\nimport { Farm } from 'state/types'\nimport { useFarmFromPid, useFarmUser, /* useFarmFromSymbol */ } from 'state/hooks'\nimport useI18n from 'hooks/useI18n'\nimport UnlockButton from 'components/UnlockButton'\nimport { useApprove } from 'hooks/useApprove'\nimport StakeAction from './StakeAction'\nimport HarvestAction from './HarvestAction'\n\nconst Action = styled.div`\n  padding-top: 16px;\n`\nexport interface FarmWithStakedValue extends Farm {\n  apy?: BigNumber\n}\n\ninterface FarmCardActionsProps {\n  farm: FarmWithStakedValue\n  ethereum?: provider\n  account?: string\n}\n\nconst CardActions: React.FC<FarmCardActionsProps> = ({ farm, ethereum, account }) => {\n  const TranslateString = useI18n()\n  const [requestedApproval, setRequestedApproval] = useState(false)\n  const { pid, lpAddresses, tokenAddresses, isTokenOnly, depositFeeBP } = useFarmFromPid(farm.pid)\n  const { allowance, tokenBalance, stakedBalance, earnings } = useFarmUser(pid)\n  const lpAddress = lpAddresses[process.env.REACT_APP_CHAIN_ID]\n  const tokenAddress = tokenAddresses[process.env.REACT_APP_CHAIN_ID];\n  const lpName = farm.lpSymbol.toUpperCase()\n  const isApproved = account && allowance && allowance.isGreaterThan(0)\n\n  const lpContract = useMemo(() => {\n    if(isTokenOnly){\n      return getContract(ethereum as provider, tokenAddress);\n    }\n    return getContract(ethereum as provider, lpAddress);\n  }, [ethereum, lpAddress, tokenAddress, isTokenOnly])\n\n  const { onApprove } = useApprove(lpContract)\n\n  const handleApprove = useCallback(async () => {\n    try {\n      setRequestedApproval(true)\n      await onApprove()\n      setRequestedApproval(false)\n    } catch (e) {\n      console.error(e)\n    }\n  }, [onApprove])\n\n  const renderApprovalOrStakeButton = () => {\n    return isApproved ? (\n      <StakeAction stakedBalance={stakedBalance} tokenBalance={tokenBalance} tokenName={lpName} pid={pid} depositFeeBP={depositFeeBP} />\n    ) : (\n      <Button mt=\"8px\" fullWidth disabled={requestedApproval} onClick={handleApprove}>\n        {TranslateString(999, 'Approve Contract')}\n      </Button>\n    )\n  }\n\n  return (\n    <Action>\n      <Flex>\n        <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" pr=\"3px\">\n          BEAST\n        </Text>\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\n          {TranslateString(999, 'Earned')}\n        </Text>\n      </Flex>\n      <HarvestAction earnings={earnings} pid={pid} />\n      <Flex>\n        <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" pr=\"3px\">\n          {lpName}\n        </Text>\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\n          {TranslateString(999, 'Staked')}\n        </Text>\n      </Flex>\n      {!account ? <UnlockButton mt=\"8px\" fullWidth /> : renderApprovalOrStakeButton()}\n    </Action>\n  )\n}\n\nexport default CardActions\n","const roundToTwoDp = (number) => Math.round(number * 100) / 100\n\nexport const calculateCakeEarnedPerThousandDollars = ({ numberOfDays, farmApy, cakePrice }) => {\n  // Everything here is worked out relative to a year, with the asset compounding daily\n  const timesCompounded = 365\n  //   We use decimal values rather than % in the math for both APY and the number of days being calculates as a proportion of the year\n  const apyAsDecimal = farmApy / 100\n  const daysAsDecimalOfYear = numberOfDays / timesCompounded\n  //   Calculate the starting CAKE balance with a dollar balance of $1000.\n  const principal = 1000 / cakePrice\n\n  // This is a translation of the typical mathematical compounding APY formula. Details here: https://www.calculatorsoup.com/calculators/financial/compound-interest-calculator.php\n  const finalAmount = principal * (1 + apyAsDecimal / timesCompounded) ** (timesCompounded * daysAsDecimalOfYear)\n\n  // To get the cake earned, deduct the amount after compounding (finalAmount) from the starting CAKE balance (principal)\n  const interestEarned = finalAmount - principal\n  return roundToTwoDp(interestEarned)\n}\n\nexport const apyModalRoi = ({ amountEarned, amountInvested }) => {\n  const percentage = (amountEarned / amountInvested) * 100\n  return percentage.toFixed(2)\n}\n","import React from 'react'\nimport BigNumber from 'bignumber.js'\nimport styled from 'styled-components'\nimport { Modal, Text, LinkExternal, Flex } from '@pancakeswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\nimport { calculateCakeEarnedPerThousandDollars, apyModalRoi } from 'utils/compoundApyHelpers'\nimport { Address } from 'config/constants/types'\n\ninterface ApyCalculatorModalProps {\n  onDismiss?: () => void\n  lpLabel?: string\n  cakePrice?: BigNumber\n  apy?: BigNumber\n  quoteTokenAdresses?: Address\n  quoteTokenSymbol?: string\n  tokenAddresses: Address\n}\n\nconst Grid = styled.div`\n  display: grid;\n  grid-template-columns: repeat(3, 1fr);\n  grid-template-rows: repeat(4, auto);\n  margin-bottom: 24px;\n`\n\nconst GridItem = styled.div`\n  margin-bottom: '10px';\n`\n\nconst Description = styled(Text)`\n  max-width: 320px;\n  margin-bottom: 28px;\n`\n\nconst ApyCalculatorModal: React.FC<ApyCalculatorModalProps> = ({\n  onDismiss,\n  lpLabel,\n  quoteTokenAdresses,\n  quoteTokenSymbol,\n  tokenAddresses,\n  cakePrice,\n  apy,\n}) => {\n  const TranslateString = useI18n()\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({ quoteTokenAdresses, quoteTokenSymbol, tokenAddresses })\n  const farmApy = apy.times(new BigNumber(100)).toNumber()\n  const oneThousandDollarsWorthOfCake = 1000 / cakePrice.toNumber()\n\n  const cakeEarnedPerThousand1D = calculateCakeEarnedPerThousandDollars({ numberOfDays: 1, farmApy, cakePrice })\n  const cakeEarnedPerThousand7D = calculateCakeEarnedPerThousandDollars({ numberOfDays: 7, farmApy, cakePrice })\n  const cakeEarnedPerThousand30D = calculateCakeEarnedPerThousandDollars({ numberOfDays: 30, farmApy, cakePrice })\n  const cakeEarnedPerThousand365D = calculateCakeEarnedPerThousandDollars({ numberOfDays: 365, farmApy, cakePrice })\n\n  return (\n    <Modal title=\"ROI\" onDismiss={onDismiss}>\n      <Grid>\n        <GridItem>\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" textTransform=\"uppercase\" mb=\"20px\">\n            {TranslateString(999, 'Timeframe')}\n          </Text>\n        </GridItem>\n        <GridItem>\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" textTransform=\"uppercase\" mb=\"20px\">\n            {TranslateString(999, 'ROI')}\n          </Text>\n        </GridItem>\n        <GridItem>\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" textTransform=\"uppercase\" mb=\"20px\">\n            BEAST per $1000\n          </Text>\n        </GridItem>\n        {/* 1 day row */}\n        <GridItem>\n          <Text>1d</Text>\n        </GridItem>\n        <GridItem>\n          <Text>\n            {apyModalRoi({ amountEarned: cakeEarnedPerThousand1D, amountInvested: oneThousandDollarsWorthOfCake })}%\n          </Text>\n        </GridItem>\n        <GridItem>\n          <Text>{cakeEarnedPerThousand1D}</Text>\n        </GridItem>\n        {/* 7 day row */}\n        <GridItem>\n          <Text>7d</Text>\n        </GridItem>\n        <GridItem>\n          <Text>\n            {apyModalRoi({ amountEarned: cakeEarnedPerThousand7D, amountInvested: oneThousandDollarsWorthOfCake })}%\n          </Text>\n        </GridItem>\n        <GridItem>\n          <Text>{cakeEarnedPerThousand7D}</Text>\n        </GridItem>\n        {/* 30 day row */}\n        <GridItem>\n          <Text>30d</Text>\n        </GridItem>\n        <GridItem>\n          <Text>\n            {apyModalRoi({ amountEarned: cakeEarnedPerThousand30D, amountInvested: oneThousandDollarsWorthOfCake })}%\n          </Text>\n        </GridItem>\n        <GridItem>\n          <Text>{cakeEarnedPerThousand30D}</Text>\n        </GridItem>\n        {/* 365 day / APY row */}\n        <GridItem>\n          <Text>365d(APY)</Text>\n        </GridItem>\n        <GridItem>\n          <Text>\n            {apyModalRoi({ amountEarned: cakeEarnedPerThousand365D, amountInvested: oneThousandDollarsWorthOfCake })}%\n          </Text>\n        </GridItem>\n        <GridItem>\n          <Text>{cakeEarnedPerThousand365D}</Text>\n        </GridItem>\n      </Grid>\n      <Description fontSize=\"12px\" color=\"textSubtle\">\n        {TranslateString(\n          999,\n          'Calculated based on current rates. Compounding once daily. Rates are estimates provided for your convenience only, and by no means represent guaranteed returns.',\n        )}\n      </Description>\n      <Flex justifyContent=\"center\">\n        <LinkExternal href={`https://exchange.pancakeswap.finance/#/add/${liquidityUrlPathParts}`}>\n          {TranslateString(999, 'Get')} {lpLabel}\n        </LinkExternal>\n      </Flex>\n    </Modal>\n  )\n}\n\nexport default ApyCalculatorModal\n","import React from 'react'\nimport BigNumber from 'bignumber.js'\nimport { CalculateIcon, IconButton, useModal } from '@pancakeswap-libs/uikit'\nimport { Address } from 'config/constants/types'\nimport ApyCalculatorModal from './ApyCalculatorModal'\n\nexport interface ApyButtonProps {\n  lpLabel?: string\n  cakePrice?: BigNumber\n  apy?: BigNumber\n  quoteTokenAdresses?: Address\n  quoteTokenSymbol?: string\n  tokenAddresses: Address\n}\n\nconst ApyButton: React.FC<ApyButtonProps> = ({\n  lpLabel,\n  quoteTokenAdresses,\n  quoteTokenSymbol,\n  tokenAddresses,\n  cakePrice,\n  apy,\n}) => {\n  const [onPresentApyModal] = useModal(\n    <ApyCalculatorModal\n      lpLabel={lpLabel}\n      quoteTokenAdresses={quoteTokenAdresses}\n      quoteTokenSymbol={quoteTokenSymbol}\n      tokenAddresses={tokenAddresses}\n      cakePrice={cakePrice}\n      apy={apy}\n    />,\n  )\n\n  return (\n    <IconButton onClick={onPresentApyModal} variant=\"text\" size=\"sm\" ml=\"4px\">\n      <CalculateIcon />\n    </IconButton>\n  )\n}\n\nexport default ApyButton\n","import React, { useMemo, useState } from \"react\";\nimport BigNumber from \"bignumber.js\";\nimport styled, { keyframes } from \"styled-components\";\nimport { Flex, Text, Skeleton } from \"@pancakeswap-libs/uikit\";\nimport { Farm } from \"state/types\";\nimport { provider } from \"web3-core\";\nimport useI18n from \"hooks/useI18n\";\nimport ExpandableSectionButton from \"components/ExpandableSectionButton\";\nimport DetailsSection from \"./DetailsSection\";\nimport CardHeading from \"./CardHeading\";\nimport CardActionsContainer from \"./CardActionsContainer\";\nimport ApyButton from \"./ApyButton\";\n\nexport interface FarmWithStakedValue extends Farm {\n  apy?: BigNumber\n}\n\nconst RainbowLight = keyframes`\n  0% {\n    background-position: 0% 50%;\n  }\n  50% {\n    background-position: 100% 50%;\n  }\n  100% {\n    background-position: 0% 50%;\n  }\n`\n\nconst StyledCardAccent = styled.div`\n  background: linear-gradient(45deg,\n    rgba(255, 0, 0, 1)      0%,\n    rgba(255, 154, 0, 1)   10%,\n    rgba(197, 20, 20, 1)   20%,\n    rgba(214, 49, 49, 1)   30%,\n    rgba(218, 49, 49, 1)   40%,\n    rgba(214, 191, 27, 1)  50%,\n    rgba(222, 59, 59, 1)   60%,\n    rgba(234, 55, 55, 1)   70%,\n    rgba(208, 62, 62, 1)   80%,\n    rgba(216, 123, 28, 1)  90%,\n    rgba(220, 186, 63, 1) 100%);\n\n  background-size: 300% 300%;\n  border-radius: 0;\n  filter: blur(6px);\n  position: absolute;\n  top: -2px;\n  right: -2px;\n  bottom: -2px;\n  left: -2px;\n  z-index: -1;\n  animation: ${RainbowLight} 2s linear infinite;\n`\n\nconst FCard = styled.div`\n  align-self: baseline;\n  background: #100000;\n  border-radius: 0;\n  box-shadow: 0px 2px 12px -8px rgba(25, 19, 38, 0.1), 0px 1px 1px rgba(25, 19, 38, 0.05);\n  display: flex;\n  flex-direction: column;\n  justify-content: space-around;\n  padding: 24px;\n  position: relative;\n  text-align: center;\n`\n\nconst Divider = styled.div`\n  background-color: ${({ theme }) => theme.colors.borderColor};\n  height: 1px;\n  margin: 28px auto;\n  width: 100%;\n`\n\nconst ExpandingWrapper = styled.div<{ expanded: boolean }>`\n  height: ${(props) => (props.expanded ? \"100%\" : \"0px\")};\n  overflow: hidden;\n`\n\ninterface FarmCardProps {\n  farm: FarmWithStakedValue\n  removed: boolean\n  cakePrice?: BigNumber\n  bnbPrice?: BigNumber\n  ethereum?: provider\n  account?: string\n}\n\nconst FarmCard: React.FC<FarmCardProps> = ({ farm, removed, cakePrice, bnbPrice, ethereum, account }) => {\n  const TranslateString = useI18n()\n  const [showExpandableSection, setShowExpandableSection] = useState(false)\n  const farmImage = farm.isTokenOnly ? farm.tokenSymbol.toLowerCase() : `${farm.tokenSymbol.toLowerCase()}-${farm.quoteTokenSymbol.toLowerCase()}`\n\n  const totalValue: BigNumber = useMemo(() => {\n    if (!farm.lpTotalInQuoteToken) {\n      return null\n    }\n    if (farm.quoteTokenSymbol === \"BNB\") {\n      return bnbPrice.times(farm.lpTotalInQuoteToken)\n    }\n    if (farm.quoteTokenSymbol === \"CAKE\") {\n      return cakePrice.times(farm.lpTotalInQuoteToken)\n    }\n    return farm.lpTotalInQuoteToken\n  }, [bnbPrice, cakePrice, farm.lpTotalInQuoteToken, farm.quoteTokenSymbol])\n\n  const totalValueFormated = totalValue\n    ? `$${Number(totalValue).toLocaleString(undefined, { maximumFractionDigits: 0 })}`\n    : \"-\"\n\n  const lpLabel = farm.lpSymbol\n  const earnLabel = \"BEAST\"\n  const farmAPY = farm.apy && farm.apy.times(new BigNumber(100)).toNumber().toLocaleString(undefined, {\n    minimumFractionDigits: 2,\n    maximumFractionDigits: 2,\n  })\n\n  const { quoteTokenAdresses, quoteTokenSymbol, tokenAddresses, risk } = farm\n\n  return (\n    <FCard style={{border: (farm.tokenSymbol === \"BEAST\" ? \"0\" : \"1px solid #ff9372\")}}>\n      {farm.tokenSymbol === \"BEAST\" && <StyledCardAccent />}\n      <CardHeading\n        lpLabel={lpLabel}\n        multiplier={farm.multiplier}\n        risk={risk}\n        depositFee={farm.depositFeeBP}\n        farmImage={farmImage}\n        tokenSymbol={farm.tokenSymbol}\n      />\n      {!removed && (\n        <Flex justifyContent=\"space-between\" alignItems=\"center\">\n          <Text>{TranslateString(352, \"APR\")}:</Text>\n          <Text bold style={{ display: \"flex\", alignItems: \"center\" }}>\n            {farm.apy ? (\n              <>\n                <ApyButton\n                  lpLabel={lpLabel}\n                  quoteTokenAdresses={quoteTokenAdresses}\n                  quoteTokenSymbol={quoteTokenSymbol}\n                  tokenAddresses={tokenAddresses}\n                  cakePrice={cakePrice}\n                  apy={farm.apy}\n                />\n                {farmAPY}%\n              </>\n            ) : (\n              <Skeleton height={24} width={80} />\n            )}\n          </Text>\n        </Flex>\n      )}\n      <Flex justifyContent=\"space-between\">\n        <Text>{TranslateString(318, \"Earn\")}:</Text>\n        <Text bold>{earnLabel}</Text>\n      </Flex>\n      <Flex justifyContent=\"space-between\">\n        <Text style={{ fontSize: \"24px\" }}>Deposit Fee:</Text>\n        <Text bold style={{ fontSize: \"24px\" }}>{(farm.depositFeeBP / 100)}%</Text>\n      </Flex>\n      <CardActionsContainer farm={farm} ethereum={ethereum} account={account} />\n      <Divider />\n      <ExpandableSectionButton\n        onClick={() => setShowExpandableSection(!showExpandableSection)}\n        expanded={showExpandableSection}\n      />\n      <ExpandingWrapper expanded={showExpandableSection}>\n        <DetailsSection\n          removed={removed}\n          isTokenOnly={farm.isTokenOnly}\n          bscScanAddress={\n            farm.isTokenOnly ?\n              `https://bscscan.com/token/${farm.tokenAddresses[process.env.REACT_APP_CHAIN_ID]}`\n              :\n              `https://bscscan.com/token/${farm.lpAddresses[process.env.REACT_APP_CHAIN_ID]}`\n          }\n          totalValueFormated={totalValueFormated}\n          lpLabel={lpLabel}\n          quoteTokenAdresses={quoteTokenAdresses}\n          quoteTokenSymbol={quoteTokenSymbol}\n          tokenAddresses={tokenAddresses}\n        />\n      </ExpandingWrapper>\n    </FCard>\n  )\n}\n\nexport default FarmCard\n","import React from 'react'\nimport styled from 'styled-components'\nimport { useRouteMatch, Link } from 'react-router-dom'\nimport { ButtonMenu, ButtonMenuItem, Text, Toggle } from '@pancakeswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\n\nconst FarmTabButtons = ({ stakedOnly, setStakedOnly }) => {\n  const { url, isExact } = useRouteMatch()\n  const TranslateString = useI18n()\n\n  return (\n    <Wrapper>\n      <ToggleWrapper>\n        <Toggle checked={stakedOnly} onChange={() => setStakedOnly(!stakedOnly)} />\n        <Text> {TranslateString(699, 'Staked only')}</Text>\n      </ToggleWrapper>\n      <ButtonMenu activeIndex={isExact ? 0 : 1} size=\"sm\" variant=\"subtle\">\n        <ButtonMenuItem as={Link} to={`${url}`}>\n          {TranslateString(698, 'Active')}\n        </ButtonMenuItem>\n        <ButtonMenuItem as={Link} to={`${url}/history`}>\n          {TranslateString(700, 'Inactive')}\n        </ButtonMenuItem>\n      </ButtonMenu>\n    </Wrapper>\n  )\n}\n\nexport default FarmTabButtons\n\nconst Wrapper = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  margin-bottom: 32px;\n`\n\nconst ToggleWrapper = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  margin-right: 32px;\n\n  ${Text} {\n    margin-left: 8px;\n  }\n`","import React, { useEffect, useCallback, useState } from \"react\";\nimport { Route, useRouteMatch } from \"react-router-dom\";\nimport { useDispatch } from \"react-redux\";\nimport BigNumber from \"bignumber.js\";\nimport styled from \"styled-components\";\nimport { useWallet } from \"@binance-chain/bsc-use-wallet\";\nimport { provider } from \"web3-core\";\nimport { BLOCKS_PER_YEAR } from \"config\";\nimport FlexLayout from \"components/layout/Flex\";\nimport Page from \"components/layout/Page\";\nimport { useFarms, usePriceBnbBusd, usePriceCakeBusd } from \"state/hooks\";\nimport useRefresh from \"hooks/useRefresh\";\nimport { fetchFarmUserDataAsync } from \"state/actions\";\nimport FarmCard, { FarmWithStakedValue } from \"./components/FarmCard/FarmCard\";\nimport FarmTabButtons from \"./components/FarmTabButtons\";\n\nconst Hero = styled.div`\n  align-items: center;\n  background-image: url('/images/beast-banner.png');\n  background-repeat: no-repeat;\n  background-position: top center;\n  background-size: contain;\n  display: flex;\n  justify-content: center;\n  flex-direction: column;\n  margin: auto;\n  margin-bottom: 32px;\n  min-height: 116px;\n  text-align: center;\n\n  div {\n    display: flex;\n    flex-direction: column;\n    justify-content: flex-end;\n    height: 116px;\n    width: 100%;\n    color: #ffffff;\n    font-size: 20px;\n    text-align: left;\n    text-shadow:\n     -1px -1px 0 #000,\n      1px -1px 0 #000,\n      -1px 1px 0 #000,\n       1px 1px 0 #000;\n\n    div:nth-child(1) {\n      margin-bottom: 8px;\n      font-size: 32px;\n    }\n\n    div:not(:nth-child(1)) {\n      flex-shrink: 99;\n    }\n  }\n`;\n\nexport interface FarmsProps{\n  tokenMode?: boolean\n}\n\nconst Farms: React.FC<FarmsProps> = (farmsProps) => {\n  const { path } = useRouteMatch()\n  const farmsLP = useFarms()\n  const cakePrice = usePriceCakeBusd()\n  const bnbPrice = usePriceBnbBusd()\n  const { account, ethereum }: { account: string; ethereum: provider } = useWallet()\n  const {tokenMode} = farmsProps;\n\n  const dispatch = useDispatch()\n  const { fastRefresh } = useRefresh()\n  useEffect(() => {\n    if (account) {\n      dispatch(fetchFarmUserDataAsync(account))\n    }\n  }, [account, dispatch, fastRefresh])\n\n  const [stakedOnly, setStakedOnly] = useState(false)\n\n  const activeFarms = farmsLP.filter((farm) => !!farm.isTokenOnly === !!tokenMode && farm.multiplier !== \"0X\")\n  const inactiveFarms = farmsLP.filter((farm) => !!farm.isTokenOnly === !!tokenMode && farm.multiplier === \"0X\")\n\n  const stakedOnlyFarms = activeFarms.filter(\n    (farm) => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0),\n  )\n\n  const farmsList = useCallback(\n    (farmsToDisplay, removed: boolean) => {\n      const farmsToDisplayWithAPY: FarmWithStakedValue[] = farmsToDisplay.map((farm) => {\n        const cakeRewardPerBlock = new BigNumber(farm.eggPerBlock || 1).times(new BigNumber(farm.poolWeight)) .div(new BigNumber(10).pow(18))\n        const cakeRewardPerYear = cakeRewardPerBlock.times(BLOCKS_PER_YEAR)\n\n        let apy = cakePrice.times(cakeRewardPerYear);\n        let totalValue = new BigNumber(farm.lpTotalInQuoteToken || 0);\n\n        if (farm.quoteTokenSymbol === \"BNB\") {\n          totalValue = totalValue.times(bnbPrice);\n        }\n\n        if(totalValue.comparedTo(0) > 0){\n          apy = apy.div(totalValue);\n        }\n\n        return { ...farm, apy }\n      })\n\n      return farmsToDisplayWithAPY.map((farm) => (\n        <FarmCard\n          key={farm.pid}\n          farm={farm}\n          removed={removed}\n          bnbPrice={bnbPrice}\n          cakePrice={cakePrice}\n          ethereum={ethereum}\n          account={account}\n        />\n      ))\n    },\n    [bnbPrice, account, cakePrice, ethereum],\n  )\n\n  return (\n    <Page>\n      <Hero>\n        <div>\n          <div>BEAST Farms</div>\n          <div>Stake LP tokens to earn BEAST</div>\n          <div>Deposit fees will be used to buyback BEAST</div>\n        </div>\n      </Hero>\n\n      <FarmTabButtons stakedOnly={stakedOnly} setStakedOnly={setStakedOnly}/>\n\n      <div>\n        {/* <Divider /> */}\n        <FlexLayout>\n          <Route exact path={`${path}`}>\n            {stakedOnly ? farmsList(stakedOnlyFarms, false) : farmsList(activeFarms, false)}\n          </Route>\n          <Route exact path={`${path}/history`}>\n            {farmsList(inactiveFarms, true)}\n          </Route>\n        </FlexLayout>\n      </div>\n    </Page>\n  )\n};\n\nexport default Farms;\n"],"sourceRoot":""}